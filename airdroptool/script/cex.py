api_key = "import requests, time
import json, random, string, os
from datetime import datetime, timezone
from termcolor import colored
from function import *
version = "6.0.0"
name_tool = "cex"
BANNER(name_tool, version)
print(f"""
{đỏ}⟩{vàng}⟩{lục}⟩ {lam}CÁC CHỨC NĂNG CỦA TOOL
{đỏ}[{vàng}+{đỏ}] {trắng}Auto click
{đỏ}[{vàng}+{đỏ}] {trắng}Auto start farm
{đỏ}[{vàng}+{đỏ}] {trắng}Auto claim fram
{đỏ}[{vàng}+{đỏ}] {trắng}Hoàn thành các nhiệm vụ (ngoài Telegram)
""")
def getUserInfo(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  ip = tasks = balance = username = email = availableTaps = farmStartedAt = maxChildrenCount = serverTime = miningEraIntervalInSeconds = None
  while True:
    try:
      if proxies:
        response = requests.post("https://cexp.cex.io/api/getUserInfo", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://cexp.cex.io/api/getUserInfo",headers=headers, json=data, timeout=30)
      #response.raise_for_status()
      getdata = response.json()["data"]
      farmReward = getdata["farmReward"]
      if farmReward == "0.00":
        farmReward = startFarm(headers, data, proxies)
        if proxies:
          response = requests.post("https://cexp.cex.io/api/getUserInfo", headers=headers, json=data, proxies=proxies, timeout=30)
        else:
          response = requests.post("https://cexp.cex.io/api/getUserInfo",headers=headers, json=data, timeout=30)
        #response.raise_for_status()
        getdata = response.json()["data"]
      ip = getdata["ip"]
      tasks = getdata["tasks"]
      balance = getdata["balance"]
      if "username" in getdata:
        username = getdata["username"]
      else:
        username = getdata["first_name"]
      email = getdata["email"]
      availableTaps = getdata["availableTaps"]
      farmStartedAt = getdata["farmStartedAt"]
      maxChildrenCount = getdata["maxChildrenCount"]
      serverTime = getdata["serverTime"]
      miningEraIntervalInSeconds = getdata["miningEraIntervalInSeconds"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool CEX")
      RUN_CEX()
      break
    COUNTDOWN(10)
  return ip, tasks, balance, username, email, availableTaps, farmStartedAt, maxChildrenCount, serverTime, miningEraIntervalInSeconds
def claimTaps(headers, data, taps, proxies=None):
  error_count = 0
  max_retries = 10
  ip = balance = username = email = availableTaps = farmStartedAt = maxChildrenCount = None
  data["data"]["taps"] = taps
  while True:
    try:
      if proxies:
        response = requests.post("https://cexp.cex.io/api/claimTaps", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://cexp.cex.io/api/claimTaps",headers=headers, json=data, timeout=30)
      #response.raise_for_status()
      data = response.json()["data"]
      ip = data["ip"]
      balance = data["balance"]
      username = data["username"]
      email = data["email"]
      availableTaps = data["availableTaps"]
      farmStartedAt = data["farmStartedAt"]
      maxChildrenCount = data["maxChildrenCount"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool CEX")
      RUN_CEX()
      break
    COUNTDOWN(10)
  return ip, balance, username, email,  availableTaps, farmStartedAt, maxChildrenCount
def claimFarm(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  balance = claimedBalance = None
  while True:
    try:
      if proxies:
        response = requests.post("https://cexp.cex.io/api/claimFarm", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://cexp.cex.io/api/claimFarm",headers=headers, json=data, timeout=30)
      #response.raise_for_status()
      data = response.json()["data"]
      balance = data["balance"]
      claimedBalance = data["claimedBalance"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool CEX")
      RUN_CEX()
      break
    COUNTDOWN(10)
  return balance, claimedBalance
def startFarm(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  farmReward = None
  while True:
    try:
      if proxies:
        response = requests.post("https://cexp.cex.io/api/startFarm", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://cexp.cex.io/api/startFarm",headers=headers, json=data, timeout=30)
      #response.raise_for_status()
      data = response.json()["data"]
      farmReward = data["farmReward"]
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã bắt đầu FARM {vàng}+{farmReward} {lục}sau khi kết thúc")
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool CEX")
      RUN_CEX()
      break
    COUNTDOWN(10)
  return farmReward
def startTask(headers, data, taskId, proxies=None):
  error_count = 0
  max_retries = 10
  state = title = reward = None
  data["data"]["taskId"] = taskId
  while True:
    try:
      if proxies:
        response = requests.post("https://cexp.cex.io/api/startTask", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://cexp.cex.io/api/startTask",headers=headers, json=data, timeout=30)
      #response.raise_for_status()
      data = response.json()["data"]
      state = data["state"]
      title = data["title"]
      reward = data["reward"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool CEX")
      RUN_CEX()
      break
    COUNTDOWN(10)
  return state, title, reward
def checkTask(headers, data, taskId, proxies=None):
  error_count = 0
  max_retries = 10
  data["data"]["taskId"] = taskId
  state = title = None
  while True:
    try:
      while state != "ReadyToClaim":
        if proxies:
          response = requests.post("https://cexp.cex.io/api/checkTask", headers=headers, json=data, proxies=proxies, timeout=30)
        else:
          response = requests.post("https://cexp.cex.io/api/checkTask",headers=headers, json=data, timeout=30)
        #response.raise_for_status()
        getdata = response.json()["data"]
        state = getdata["state"]
        title = getdata["title"]
        if state == "ReadyToClaim":
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Check {lam}{title} {lục}THÀNH CÔNG")
          break
        else:
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Check {lam}{title} {đỏ}THẤT BẠI")
          time.sleep(30)
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool CEX")
      RUN_CEX()
      break
    COUNTDOWN(10)
  return state, title
def claimTask(headers, data, taskId, proxies=None):
  error_count = 0
  max_retries = 10
  balance = claimedBalance = state = title = None
  data["data"]["taskId"] = taskId
  while True:
    try:
      if proxies:
        response = requests.post("https://cexp.cex.io/api/claimTask", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://cexp.cex.io/api/claimTask",headers=headers, json=data, timeout=30)
      #response.raise_for_status()
      data = response.json()["data"]
      balance = data["balance"]
      claimedBalance = data["claimedBalance"]
      state = data["task"]["state"]
      title = data["task"]["title"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool CEX")
      RUN_CEX()
      break
    COUNTDOWN(10)
  return balance, claimedBalance, state, title

def RUN_CEX():
  with open('config/cex.json', 'r', encoding='utf-8') as file:
    config_data = json.loads(remove_comments(file.read()))
  users = config_data
  if len(users) > 10:
    print("Bạn chỉ được phép thêm tối đa 10 tài khoản để chạy tool")
    exit()
  for user in users:
    account = user["STT_ACCOUNT"]
    data = user["DATA"]
    if data == "" or data == "thay_thế_bằng_data":
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}Tài khoản {vàng}{account.split('_')[1]} {đỏ}DATA đang bị trống")
      continue
    with open('config/setting.json', 'r', encoding='utf-8') as file:
      config_acc = json.loads(remove_comments(file.read()))[account]
    proxy_list = config_acc["proxy"]
    type_proxy = config_acc["type_proxy"]
    user_agent = config_acc["user-agent"]
    if proxy_list != "":
      proxy_list = proxy_list.split(":")
      proxy = f"{type_proxy}://{proxy_list[2]}:{proxy_list[3]}@{proxy_list[0]}:{proxy_list[1]}"
      proxies = {
      'http': proxy,
      'https': proxy,}
    else:
      if account.split('_')[1] != "1":
        print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}Chuyển tài khoản do không có proxy")
        continue
      proxies = ""
    ip, fakeip = getIP(proxies)
    if ip == fakeip == None:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}\nĐỔI TÀI KHOẢN DO KHÔNG LẤY ĐƯỢC IP, HÃY KIỂM TRA LẠI PROXY\n")
      continue
    headers = {
      'Host': 'cexp.cex.io',
      'sec-ch-ua': '"Chromium";v="124", "Android WebView";v="124", "Not-A.Brand";v="99"',
      'accept': 'application/json, text/plain, */*',
      'content-type': 'application/json',
      'sec-ch-ua-mobile': '?1',
      'user-agent': user_agent,
      'sec-ch-ua-platform': '"Android"',
      'origin': 'https://cexp.cex.io',
      'referer': 'https://cexp.cex.io/'}
    ipGame, tasks, balance, username, email, availableTaps, farmStartedAt, maxChildrenCount, serverTime, miningEraIntervalInSeconds = getUserInfo(headers, data, proxies)
    print(f"""{đậm}{đen}<<<<<<<<<<<<<<<<<<{lam}[{vàngBG}{đỏ}THÔNG TIN TÀI KHOẢN CEX.IO{đenBG}{lam}]{đen}>>>>>>>>>>>>>>>>>\n{đen}〘👤〙{trắng}UserName {đỏ}: {lục}{username} {trắng}({hồng}{account.split('_')[1]}{trắng})\n{đen}〘🪙〙{trắng}Số Dư {đỏ}: {vàng}{balance}\n{đen}〘📊〙{trắng}Thông số Game{đỏ}: {vàng}{availableTaps}{đen}/{vàng}{maxChildrenCount}\n{đen}〘📧〙{trắng}Email{đỏ}: {xanh}{email}\n{đen}〘🌏〙{trắng}IP {đỏ}: {nâu}{ip} {lục}»»» {trắng}Fake IP {đỏ}: {lam}{fakeip}\n""")
    start_time = datetime.now()
    print(f"{đỏ}\033[1;33;40mBẮT ĐẦU CHẠY TOOL {thường}{đậm}{đỏ}» {đen}[{vàng}{start_time.strftime('%H:%M:%S')}{đen}]\n")
    if availableTaps > 0:
      taps = availableTaps
      ip, newbalance, username, email,  availableTaps, farmStartedAt, maxChildrenCount = claimTaps(headers, data, taps, proxies)
      if newbalance > balance:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã CLICK {taps} lần {đỏ}» {vàng}{newbalance}")
      else:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}CLICK {taps} LẦN THẤT BẠI{đỏ}» {vàng}{newbalance}")
    else:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã hết lượt click")
    dt = datetime.strptime(farmStartedAt, "%Y-%m-%dT%H:%M:%S.%fZ")
    dt = dt.replace(tzinfo=timezone.utc)
    timestamp = int(dt.timestamp() * 1000)
    if timestamp+miningEraIntervalInSeconds*1000 < serverTime:
      balance, claimedBalance = claimFarm(headers, data, proxies)
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã Claim FARM {vàng}+{claimedBalance} {đỏ}» {vàng}{balance}")
      #farmReward = startFarm(headers, proxies)
    else:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Chưa đến thời gian nhận {lam}Farm Rewards")
    
    for taskId in tasks:
      if tasks[taskId]["priority"] > 7 and tasks[taskId]["state"] != "Claimed":
        #print(tasks[taskId])
        if "Join" or "Subscribe" in tasks[taskId]["title"]:
          continue
        if tasks[taskId]["state"] == "ReadyToClaim":
          balance, claimedBalance, state, title = claimTask(headers, data, taskId, proxies)
          if state == "Claimed":
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Hoàn thành {lam}{title} {vàng}+{claimedBalance} {đỏ}» {vàng}{balance}")
          else:
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Claim {lam}{title} {đỏ} THẤT BẠI")
        elif tasks[taskId]["state"] == "ReadyToCheck":
          state, title = checkTask(headers, data, taskId, proxies)
          if state == "ReadyToClaim":
            balance, claimedBalance, state, title = claimTask(headers, data, taskId, proxies)
            if state == "Claimed":
              now_time = datetime.now().strftime("%H:%M:%S")
              print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Hoàn thành {lam}{title} {vàng}+{claimedBalance} {đỏ}» {vàng}{balance}")
            else:
              now_time = datetime.now().strftime("%H:%M:%S")
              print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Claim {lam}{title} {đỏ} THẤT BẠI")
          else:
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Check {lam}{title} {đỏ}THẤT BẠI")
        else:
          state, title, reward = startTask(headers, data, taskId, proxies)
          if state == "ReadyToCheck":
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Start {lam}{title}")
            time.sleep(60)
            state = checkTask(headers, data, taskId, proxies)
            balance, claimedBalance, state, title = claimTask(headers, data, taskId, proxies)
            if state == "Claimed":
              now_time = datetime.now().strftime("%H:%M:%S")
              print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Hoàn thành {lam}{title} {vàng}+{claimedBalance} {đỏ}» {vàng}{balance}")
            else:
              now_time = datetime.now().strftime("%H:%M:%S")
              print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Claim {lam}{title} {đỏ}THẤT BẠI")
    print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}ĐỔI TÀI KHOẢN")
RUN_CEX()"