api_key = "import requests, time
import json, random, string, os
from datetime import datetime, timezone
from termcolor import colored
from function import *
version = "6.0.0"
name_tool = "wormfare"
BANNER(name_tool, version)
print(f"""
{đỏ}⟩{vàng}⟩{lục}⟩ {lam}CÁC CHỨC NĂNG CỦA TOOL
{đỏ}[{vàng}+{đỏ}] {trắng}Auto điểm danh hàng ngày
{đỏ}[{vàng}+{đỏ}] {trắng}Auto click
{đỏ}[{vàng}+{đỏ}] {trắng}Auto sử dụng booster
{đỏ}[{vàng}+{đỏ}] {trắng}Auto nâng cấp booster
{đỏ}[{vàng}+{đỏ}] {trắng}Auto hoàn thành các nhiệm vụ (Soon)
""")
def PROFILE(headers, proxies=None):
  error_count = 0
  max_retries = 10
  headers.pop("content-type", None)
  while True:
    try:
      if proxies:
        response = requests.get("https://api.clicker.wormfare.com/user/profile", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api.clicker.wormfare.com/user/profile", headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      username = getdata["username"]
      dame = getdata["energyPerTap"]
      energyLeft = getdata["energyLeft"]
      energyMax = getdata["energyMax"]
      energyPerSecond = getdata["energyPerSecond"]
      balance = getdata["score"]
      isTurboAvailable = getdata["isTurboAvailable"]
      nameSquad = getdata["squad"]["name"]
      members = getdata["squad"]["totalMembers"]
      scoreSquad = getdata["squad"]["totalEarnedScore"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool WORMFARE")
      RUN_WORMFARE()
      break
    COUNTDOWN(10)
  return username, dame, energyLeft, energyMax, energyPerSecond, balance, nameSquad, members, scoreSquad, isTurboAvailable
def QUEST(headers, proxies=None):
  error_count = 0
  max_retries = 10
  headers.pop("content-type",None)
  while True:
    try:
      if proxies:
        response = requests.get("https://api.clicker.wormfare.com/quest", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api.clicker.wormfare.com/quest",headers=headers, timeout=30)
      response.raise_for_status()
      tasks = response.json()
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool WORMFARE")
      RUN_WORMFARE()
      break
    COUNTDOWN(10)
  return tasks
def CLICK(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  headers["content-type"] = "application/json"
  while True:
    try:
      if proxies:
        response = requests.post("https://api.clicker.wormfare.com/game/save-clicks", headers=headers, timeout=30, json=data, proxies=proxies)
      else:
        response = requests.post("https://api.clicker.wormfare.com/game/save-clicks", headers=headers, timeout=30, json=data)
      response.raise_for_status()
      getdata = response.json()
      energyLeft = getdata["energyLeft"]
      balance = getdata["score"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool WORMFARE")
      RUN_WORMFARE()
      break
    COUNTDOWN(10)
  return energyLeft, balance
def CHECK_QUEST(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  headers["content-type"] = "application/json"
  while True:
    try:
      if proxies:
        response = requests.post("https://api.clicker.wormfare.com/quest/check-completion", headers=headers, timeout=30, json=data, proxies=proxies)
      else:
        response = requests.post("https://api.clicker.wormfare.com/quest/check-completion", headers=headers, timeout=30, json=data)
      response.raise_for_status()
      getdata = response.json()
      success = getdata["success"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool WORMFARE")
      RUN_WORMFARE()
      break
    COUNTDOWN(10)
  return success
def CLAIM_QUEST(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  headers["content-type"] = "application/json"
  while True:
    try:
      if proxies:
        response = requests.post("https://api.clicker.wormfare.com/quest/claim-reward", headers=headers, timeout=30, json=data, proxies=proxies)
      else:
        response = requests.post("https://api.clicker.wormfare.com/quest/claim-reward", headers=headers, timeout=30, json=data)
      response.raise_for_status()
      getdata = response.json()
      success = getdata["success"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool WORMFARE")
      RUN_WORMFARE()
      break
    COUNTDOWN(10)
  return success
def SHOP(headers, proxies=None):
  error_count = 0
  max_retries = 10
  headers.pop("content-type",None)
  while True:
    try:
      if proxies:
        response = requests.get("https://api.clicker.wormfare.com/game/shop", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api.clicker.wormfare.com/game/shop",headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      countFullEnergy = getdata["dailyBoosts"][0]["availableCount"]
      countTurbo = getdata["dailyBoosts"][1]["availableCount"]
      RecoveryConfig = getdata["availableBoost"][1]
      TapConfig = getdata["availableBoost"][2]
      MaxEnergyConfig = getdata["availableBoost"][0]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool WORMFARE")
      RUN_WORMFARE()
      break
    COUNTDOWN(10)
  return countFullEnergy, countTurbo, RecoveryConfig, TapConfig, MaxEnergyConfig
def BUY_BOOST(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  headers["content-type"] = "application/json"
  while True:
    try:
      if proxies:
        response = requests.post("https://api.clicker.wormfare.com/game/buy-boost", headers=headers, timeout=30, json=data, proxies=proxies)
      else:
        response = requests.post("https://api.clicker.wormfare.com/game/buy-boost", headers=headers, timeout=30, json=data)
      response.raise_for_status()
      getdata = response.json()
      balance = getdata["score"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool WORMFARE")
      RUN_WORMFARE()
      break
    COUNTDOWN(10)
  return balance
def ACTIVE_BOOST(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  headers["content-type"] = "application/json"
  while True:
    try:
      if proxies:
        response = requests.post("https://api.clicker.wormfare.com/game/activate-daily-boost", headers=headers, timeout=30, json=data, proxies=proxies)
      else:
        response = requests.post("https://api.clicker.wormfare.com/game/activate-daily-boost", headers=headers, timeout=30, json=data)
      response.raise_for_status()
      getdata = response.json()
      countTurbo = getdata[1]["availableCount"]
      countFullEnergy = getdata[0]["availableCount"]
      status_code = response.status_code
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool WORMFARE")
      RUN_WORMFARE()
      break
    COUNTDOWN(10)
  return countTurbo, countFullEnergy, status_code
def RUN_WORMFARE():
  with open('config/wormfare.json', 'r', encoding='utf-8') as file:
    config_data = json.loads(remove_comments(file.read()))
  users = config_data
  if len(users) > 10:
    print("Bạn chỉ được phép thêm tối đa 10 tài khoản để chạy tool")
    exit()
  for user in users:
    account = user["STT_ACCOUNT"]
    authorization = user["AUTHORIZATION"]
    if authorization == "" or authorization == "thay_thế_bằng_authorization":
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}Tài khoản {vàng}{account.split('_')[1]} {đỏ}DATA đang bị trống")
      continue
    with open('config/setting.json', 'r', encoding='utf-8') as file:
      config_acc = json.loads(remove_comments(file.read()))[account]
    proxy_list = config_acc["proxy"]
    type_proxy = config_acc["type_proxy"]
    user_agent = config_acc["user-agent"]
    if proxy_list != "":
      proxy_list = proxy_list.split(":")
      proxy = f"{type_proxy}://{proxy_list[2]}:{proxy_list[3]}@{proxy_list[0]}:{proxy_list[1]}"
      proxies = {
      'http': proxy,
      'https': proxy,}
    else:
      if account.split('_')[1] != "1":
        print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}Chuyển tài khoản do không có proxy")
        continue
      proxies = ""
    ip, fakeip = getIP(proxies)
    if ip == fakeip == None:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}\nĐỔI TÀI KHOẢN DO KHÔNG LẤY ĐƯỢC IP, HÃY KIỂM TRA LẠI PROXY\n")
      continue
    headers = {
      "Host":"api.clicker.wormfare.com",
      "Accept": "application/json, text/plain, */*",
      "Accept-Encoding": "gzip, deflate, br, zstd",
      "Accept-Language": "en-US,en;q=0.9",
      "Authorization": authorization,
      "Referer": "https://clicker.wormfare.com/",
      "Sec-Ch-Ua": '"Chromium";v="124", "Google Chrome";v="124", "Not-A.Brand";v="99"',
      "Sec-Ch-Ua-Mobile": "?1",
      "Sec-Ch-Ua-Platform": '"Android"',
      "origin":"https://clicker.wormfare.com",
      "Sec-Fetch-Dest": "empty",
      "Sec-Fetch-Mode": "cors",
      "Sec-Fetch-Site": "cross-site",
      "User-Agent": user_agent,
      "priority":"u=1, i",
      "X-Api-Key": "9m60AhO1I9JmrYIsWxMnThXbF3nDW4GHFA1rde5PKzJmRA9Dv6LZ2YXSM6vvwigC"}
    username, dame, energyLeft, energyMax, energyPerSecond, balance, nameSquad, members, scoreSquad, isTurboAvailable = PROFILE(headers, proxies)
    free_turbo = ""
    if isTurboAvailable == True:
      free_turbo = "🐟"
    countFullEnergy, countTurbo, RecoveryConfig, TapConfig, MaxEnergyConfig = SHOP(headers, proxies)
    timestamp = int(time.time() * 1000)
    energyLeft, newbalance = CLICK(headers, {"startTimestamp":timestamp,"amount":dame,"isTurbo":False}, proxies)
    print(f"""{đậm}{đen}«««««««««««««««««{lam}[{vàngBG}{đỏ}THÔNG TIN TÀI KHOẢN WORMFARE{đenBG}{lam}]{đen}»»»»»»»»»»»»»»»»\n{đen}〘👤〙{trắng}UserName {đỏ}: {lục}{username} {trắng}({hồng}{account.split('_')[1]}{trắng})\n{đen}〘🪙〙{trắng}Số Dư {đỏ}: {vàng}{balance:,}\n{đen}〘📊〙{trắng}Thông số Game{đỏ}: {vàng}+{dame}{đen}/{vàng}click {đỏ}[{lam}{energyLeft:,}{đen}/{lam}{energyMax:,}{đỏ}] {vàng}{countTurbo}⚡ {countFullEnergy}🔋 {free_turbo}\n{đen}〘📧〙{trắng}Thông tin Squad{đỏ}: {xanh}{nameSquad} {đen}| {vàng}{scoreSquad:,} {đen}| {hồng}{members}👥\n{đen}〘🌏〙{trắng}IP {đỏ}: {nâu}{ip} {lục}»»» {trắng}Fake IP {đỏ}: {lam}{fakeip}\n""")
    start_time = datetime.now()
    print(f"{đỏ}\033[1;33;40mBẮT ĐẦU CHẠY TOOL {thường}{đậm}{đỏ}» {đen}[{vàng}{start_time.strftime('%H:%M:%S')}{đen}]\n")
    tasks = QUEST(headers, proxies)
    list_task = ["_JoinDiscordQuest","_JoinInstagramQuest","_JoinTwitterQuest","_JoinTikTokQuest","_JoinYoutubeQuest","_WatchWormfareVideoQuest"]
    for task in tasks:
      taskID = task["id"]
      if taskID in list_task and task["isRewardClaimed"] == False:
        if len(task["tasks"]) > 1:
          for i in task["tasks"]:
            data = {"questId":taskID,"taskId":i['id']}
            success = CHECK_QUEST(headers, data, proxies)
            #print(success)
        else:
          data = {"questId":taskID}
          success = CHECK_QUEST(headers, data, proxies)
        if success == True:
          success = CLAIM_QUEST(headers, data, proxies)
          if success == True:
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Hoàn thành {lam}{taskID} {vàng}+{task['rewardAmount']}")
          else:
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Claim phần thưởng {lam}{taskID} {đỏ}THẤT BẠI")
        else:
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Check nhiệm vụ {lam}{taskID} {đỏ}THẤT BẠI")
    #print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}NÂNG CẤP BOOST")
    def UPGRADE(balance, TapConfig, RecoveryConfig, MaxEnergyConfig):
      while balance > RecoveryConfig["priceInScore"] or balance > MaxEnergyConfig["priceInScore"] or balance > TapConfig["priceInScore"]:
        typeUpgrade = None
        if balance > TapConfig["priceInScore"] and typeUpgrade == None and TapConfig["level"] < 21:
          typeUpgrade = TapConfig["type"]
          level = TapConfig["level"] + 1
          price = TapConfig["priceInScore"]
         
        if balance > MaxEnergyConfig["priceInScore"] and typeUpgrade == None and MaxEnergyConfig["level"] < 21:
          typeUpgrade = MaxEnergyConfig["type"]
          level = MaxEnergyConfig["level"] + 1
          price = MaxEnergyConfig["priceInScore"]
        if balance > RecoveryConfig["priceInScore"] and typeUpgrade == None and RecoveryConfig["level"] < 21:
          typeUpgrade = RecoveryConfig["type"]
          level = RecoveryConfig["level"] + 1
          price = RecoveryConfig["priceInScore"]
        if typeUpgrade == None:
          break
        balance = BUY_BOOST(headers, {"type":typeUpgrade}, proxies)
        nameUpgrade = typeUpgrade.replace('_',' ').upper()
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Nâng cấp {hồng}{nameUpgrade} {trắng}({lam}{level}{trắng}) {lục}• {đỏ}-{price:,} {đen}» {vàng}{balance:,}")
        countFullEnergy, countTurbo, RecoveryConfig, TapConfig, MaxEnergyConfig = SHOP(headers, proxies)
      return balance, TapConfig, RecoveryConfig, MaxEnergyConfig
    balance, TapConfig, RecoveryConfig, MaxEnergyConfig = UPGRADE(balance, TapConfig, RecoveryConfig, MaxEnergyConfig)
    #print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}HẾT TIỀN NÂNG CẤP BOOST")
    
    if isTurboAvailable == True:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã kích hoạt Turbo", end=" ")
        timestamp = int(time.time() * 1000)
        amount = 1000*5*dame
        time.sleep(7)
        energyLeft, newbalance = CLICK(headers, {"startTimestamp":timestamp,"amount":amount,"isTurbo":True}, proxies)
        score = newbalance - balance
        balance = newbalance
        print(f"{vàng}+{score} {đỏ}» {vàng}{newbalance:,}")
        #exit()
        if score == 5000*5*dame:
          exit()
    
    username, dame, energyLeft, energyMax, energyPerSecond, balance, nameSquad, members, scoreSquad, isTurboAvailable = PROFILE(headers, proxies)
    while True:
      if energyLeft/dame > 10:
        if energyLeft/dame > 50:
          countTap = random.randint(50,int(energyLeft/dame))
        else:
          countTap = int(energyLeft/dame)
        timestamp = int(time.time() * 1000)
        time.sleep(3)
        amount = dame*countTap
        energyLeft, newbalance = CLICK(headers, {"startTimestamp":timestamp,"amount":amount,"isTurbo":False}, proxies)
        collectAmount = newbalance - balance
        balance = newbalance
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đen}╔═{đỏ}[{vàng}{now_time}{đỏ}] {trắng}Đã CLICK {lục}{countTap} {trắng}lần {vàng}+{collectAmount:,} {đỏ}»", end=" ")
        print(f"{vàng}{newbalance:,}\n{đen}╚⫸{hồng}Link tool & hướng dẫn tại Telegram{đỏ}: {lục}@AirdropToolChannel\n")
      else:
        countFullEnergy, countTurbo, RecoveryConfig, TapConfig, MaxEnergyConfig = SHOP(headers, proxies)
        if countFullEnergy > 0:
          countTurbo, countFullEnergy, status_code = ACTIVE_BOOST(headers, {"type":"full_energy"}, proxies)
          if status_code < 300:
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã kích hoạt Full Energy", end=" ")
            username, dame, energyLeft, energyMax, energyPerSecond, balance, nameSquad, members, scoreSquad, isTurboAvailable = PROFILE(headers, proxies)
            print(f"{đỏ}[{lam}{energyLeft:,}{đen}/{lam}{energyMax:,}{đỏ}]\n")
          else:
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Đã kích hoạt Full Energy THẤT BẠI")
        else:
          if countTurbo > 0:
            for i in range(0,countTurbo):
              countTurbo, countFullEnergy, status_code = ACTIVE_BOOST(headers, {"type":"turbo"}, proxies)
              if status_code < 300:
                now_time = datetime.now().strftime("%H:%M:%S")
                print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã kích hoạt Turbo", end=" ")
                timestamp = int(time.time() * 1000)
                amount = 5000*5*dame
                time.sleep(7)
                energyLeft, newbalance = CLICK(headers, {"startTimestamp":timestamp,"amount":amount,"isTurbo":True}, proxies)
                score = newbalance - balance
                balance = newbalance
                print(f"{vàng}+{score:,} {đỏ}» {vàng}{newbalance:,}")
                if score >= 5000*5*dame:
                  exit()
                balance, TapConfig, RecoveryConfig, MaxEnergyConfig = UPGRADE(balance, TapConfig, RecoveryConfig, MaxEnergyConfig)
              else:
                now_time = datetime.now().strftime("%H:%M:%S")
                print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Đã kích hoạt Turbo THẤT BẠI")
          print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}HẾT LƯỢT CLICK, HẾT BOOSTERS {đỏ}» {vàng}ĐỔI TÀI KHOẢN")
          break
RUN_WORMFARE()"