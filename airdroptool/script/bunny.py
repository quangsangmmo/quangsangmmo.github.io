api_key = "import requests, time
import json, random, string, os
from datetime import datetime, timezone
from termcolor import colored
from function import *
version = "6.0.0"
name_tool = "bunny"
BANNER(name_tool, version)
print(f"""
{đỏ}⟩{vàng}⟩{lục}⟩ {lam}CÁC CHỨC NĂNG CỦA TOOL
{đỏ}[{vàng}+{đỏ}] {trắng}Auto điểm danh hàng ngày
{đỏ}[{vàng}+{đỏ}] {trắng}Auto click
{đỏ}[{vàng}+{đỏ}] {trắng}Auto sử dụng booster
{đỏ}[{vàng}+{đỏ}] {trắng}Auto nâng cấp booster
{đỏ}[{vàng}+{đỏ}] {trắng}Auto hoàn thành các nhiệm vụ (Soon)
""")
def PROFILE(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://api.bunnyapp.io/", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api.bunnyapp.io/", headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      username = getdata["user"]["nickname"]
      balance = getdata["user"]["coins"]
      energy = getdata["energy"]
      clan = getdata["clan"]
      dame = getdata["user"]["upgrades"]["multitap"]["value"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool BUNNY")
      RUN_BUNNY()
      break
    COUNTDOWN(10)
  return username, balance, energy, clan, dame
def CLICK(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.bunnyapp.io/taps", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.bunnyapp.io/taps", headers=headers, json=data, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      balance = getdata["coins"]
      energy = getdata["energy"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool BUNNY")
      RUN_BUNNY()
      break
    COUNTDOWN(10)
  return balance, energy
def ACTIVE_BOOST(headers, type_boost, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post(f"https://api.bunnyapp.io/boosts/action/{type_boost}", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.post(f"https://api.bunnyapp.io/boosts/action/{type_boost}", headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      status = getdata["status"]
      energy = getdata["energy"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool BUNNY")
      RUN_BUNNY()
      break
    COUNTDOWN(10)
  return energy, status
def BOOSTS(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://api.bunnyapp.io/boosts", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api.bunnyapp.io/boosts", headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      type0 = getdata["actions"][0]["type"]
      type1 = getdata["actions"][1]["type"]
      if type0 == "MEGA_BOOST" or type1 == "RESET_ENERGY":
        countTurbo = getdata["actions"][0]["count"]
        countFullEnergy = getdata["actions"][1]["count"]
      else:
        countTurbo = getdata["actions"][1]["count"]
        countFullEnergy = getdata["actions"][0]["count"]
      tapConfig = getdata["upgrades"][0]
      energyConfig = getdata["upgrades"][1]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool BUNNY")
      RUN_BUNNY()
      break
    COUNTDOWN(10)
  return countTurbo, countFullEnergy, tapConfig, energyConfig
def DAILY(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.bunnyapp.io/daily/claim", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.bunnyapp.io/daily/claim", headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      status = getdata["status"]
      if status == "success":
        reward_amount = getdata["reward_amount"]
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Điểm danh thành công {vàng}+{reward_amount}")
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool BUNNY")
      RUN_BUNNY()
      break
    COUNTDOWN(10)
  return reward_amount, status
def DAILY_LIST(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://api.bunnyapp.io/daily/list", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api.bunnyapp.io/daily/list", headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      status = getdata["status"]
      is_claimed_today = False
      if status == "success":
        is_claimed_today = getdata["is_claimed_today"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool BUNNY")
      RUN_BUNNY()
      break
    COUNTDOWN(10)
  return is_claimed_today
def MEGA_CLICK(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.bunnyapp.io/taps/mega", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.bunnyapp.io/taps/mega", headers=headers, json=data, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      balance = getdata["coins"]
      energy = getdata["energy"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool BUNNY")
      RUN_BUNNY()
      break
    COUNTDOWN(10)
  return balance, energy
def LEVEL_UP(headers, typeUpgrade, key_level, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post(f"https://api.bunnyapp.io/boosts/upgrade/{typeUpgrade}/{key_level}", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.post(f"https://api.bunnyapp.io/boosts/upgrade/{typeUpgrade}/{key_level}", headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      balance = getdata["user"]["coins"]
      energy = getdata["energy"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool BUNNY")
      RUN_BUNNY()
      break
    COUNTDOWN(10)
  return balance, energy
def LEVEL_UP(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get(f"https://api.bunnyapp.io/dungeon", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get(f"https://api.bunnyapp.io/dungeon", headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      balance = getdata["user"]["coins"]
      energy = getdata["energy"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool BUNNY")
      RUN_BUNNY()
      break
    COUNTDOWN(10)
  return balance, energy

def RUN_BUNNY():
  with open('config/bunny.json', 'r', encoding='utf-8') as file:
    config_data = json.loads(remove_comments(file.read()))
  users = config_data
  if len(users) > 10:
    print("Bạn chỉ được phép thêm tối đa 10 tài khoản để chạy tool")
    exit()
  for user in users:
    account = user["STT_ACCOUNT"]
    cookie = user["COOKIE"]
    if cookie == "" or cookie == "thay_thế_bằng_cookie":
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}Tài khoản {vàng}{account.split('_')[1]} {đỏ}DATA đang bị trống")
      continue
    with open('config/setting.json', 'r', encoding='utf-8') as file:
      config_acc = json.loads(remove_comments(file.read()))[account]
    proxy_list = config_acc["proxy"]
    type_proxy = config_acc["type_proxy"]
    user_agent = config_acc["user-agent"]
    if proxy_list != "":
      proxy_list = proxy_list.split(":")
      proxy = f"{type_proxy}://{proxy_list[2]}:{proxy_list[3]}@{proxy_list[0]}:{proxy_list[1]}"
      proxies = {
      'http': proxy,
      'https': proxy,}
    else:
      if account.split('_')[1] != "1":
        print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}Chuyển tài khoản do không có proxy")
        continue
      proxies = ""

    ip, fakeip = getIP(proxies)
    if ip == fakeip == None:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}\nĐỔI TÀI KHOẢN DO KHÔNG LẤY ĐƯỢC IP, HÃY KIỂM TRA LẠI PROXY\n")
      continue
    headers = {
      "Host": "api.bunnyapp.io",
      "sec-ch-ua": '"Android WebView";v="125", "Chromium";v="125", "Not.A/Brand";v="24"',
      "accept-language": "en",
      "sec-ch-ua-mobile": "?1",
      "user-agent": user_agent,
      "sec-ch-ua-platform": '"Android"',
      "accept": "*/*",
      "origin": "https://bunnyapp.io",
      "x-requested-with": "mark.via.gx",
      "sec-fetch-site": "same-site",
      "sec-fetch-mode": "cors",
      "sec-fetch-dest": "empty",
      "referer": "https://bunnyapp.io/",
      "accept-encoding": "gzip, deflate, br, zstd",
      "cookie": cookie,
      "priority": "u=1, i"
    }
    
    username, balance, energy, clan, dame= PROFILE(headers, proxies)
    countTurbo, countFullEnergy, tapConfig, energyConfig = BOOSTS(headers, proxies)
    print(f"""{đậm}{đen}<<<<<<<<<<<<<<<<<<{lam}[{vàngBG}{đỏ}THÔNG TIN TÀI KHOẢN BUNNY{đenBG}{lam}]{đen}>>>>>>>>>>>>>>>>>>\n{đen}〘👤〙{trắng}UserName {đỏ}: {lục}{username} {trắng}({hồng}{account.split('_')[1]}{trắng})\n{đen}〘🪙〙{trắng}Số Dư {đỏ}: {vàng}{balance:,}\n{đen}〘📊〙{trắng}Thông số Game{đỏ}: {lục}+{dame}{đen}/{lục}click {vàng}{energy}⚡ {lam}{countTurbo} {countFullEnergy}\n{đen}〘📧〙{trắng}Thông tin Clan{đỏ}: {xanh}{clan['title']}\n{đen}〘🌏〙{trắng}IP {đỏ}: {nâu}{ip} {lục}»»» {trắng}Fake IP {đỏ}: {lam}{fakeip}\n""")
    start_time = datetime.now()
    print(f"{đỏ}\033[1;33;40mBẮT ĐẦU CHẠY TOOL {thường}{đậm}{đỏ}» {đen}[{vàng}{start_time.strftime('%H:%M:%S')}{đen}]\n")
    if DAILY_LIST(headers, proxies) == False:
      reward_amount, status = DAILY(headers, proxies)
    def UPGRADE(balance, tapConfig, energyConfig):
      while balance > tapConfig["cost"] or balance > energyConfig["cost"]:
        typeUpgrade = None
        if balance > tapConfig["cost"] and typeUpgrade == None and tapConfig["level"] < 13:
          typeUpgrade = tapConfig["type"]
          level = tapConfig["level"]
          key_level = level*2+1
          price = tapConfig["cost"]
        if balance > energyConfig["cost"] and typeUpgrade == None and energyConfig["level"] < 13:
          typeUpgrade = energyConfig["type"]
          level = energyConfig["level"]
          key_level = level*2+2
          price = energyConfig["cost"]
        if typeUpgrade == None:
          break
        balance, energy = LEVEL_UP(headers,typeUpgrade, key_level, proxies)
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Nâng cấp {hồng}{typeUpgrade} {trắng}({lam}{level+1}{trắng}) {lục}• {đỏ}-{price:,} {đen}» {vàng}{balance:,}\n")
        countTurbo, countFullEnergy, tapConfig, energyConfig = BOOSTS(headers, proxies)
      return balance, tapConfig, energyConfig
    #print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}NÂNG CẤP BOOST")
    balance, tapConfig, energyConfig = UPGRADE(balance, tapConfig, energyConfig)
    #print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}HẾT TIỀN NÂNG CẤP BOOST\n")
    username, balance, energy, clan, dame= PROFILE(headers, proxies)
    while True:
      if energy > 0:
        for i in range(0,energy):
          newbalance, energy = CLICK(headers, {"coins":1000*dame}, proxies)
          collectAmount = newbalance - balance
          balance = newbalance
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đen}╔═{đỏ}[{vàng}{now_time}{đỏ}] {trắng}Đã CLICK {vàng}+{collectAmount:,} {đỏ}• {lam}{energy} energy {đỏ}»", end=" ")
          print(f"{vàng}{newbalance:,}\n{đen}╚⫸{hồng}Link tool & hướng dẫn tại Telegram{đỏ}{đỏ}: {lục}@AirdropToolChannel\n")
          balance, tapConfig, energyConfig = UPGRADE(balance, tapConfig, energyConfig)
          username, balance, energy, clan, dame= PROFILE(headers, proxies)
      else:
        countTurbo, countFullEnergy, tapConfig, energyConfig = BOOSTS(headers, proxies)
        if countFullEnergy > 0:
          energy, status = ACTIVE_BOOST(headers, "RESET_ENERGY", proxies)
          if status == "success":
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã kích hoạt Full Energy {đỏ}• {lam}{energy} energy\n")
          else:
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Đã kích hoạt Full Energy THẤT BẠI")
        else:
          if countTurbo > 2:
            for i in range(2,countTurbo):
              energy, status = ACTIVE_BOOST(headers, "MEGA_BOOST", proxies)
              if status == "success":
                now_time = datetime.now().strftime("%H:%M:%S")
                print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã kích hoạt Turbo", end=" ")
                newbalance, energy = MEGA_CLICK(headers, {"coins":1000*dame*10},proxies)
                score = newbalance - balance
                balance = newbalance
                print(f"{vàng}+{score:,} {đỏ}» {vàng}{newbalance:,}")
                balance, tapConfig, energyConfig = UPGRADE(balance, tapConfig, energyConfig)
                username, balance, energy, clan, dame= PROFILE(headers, proxies)
              else:
                now_time = datetime.now().strftime("%H:%M:%S")
                print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Đã kích hoạt Turbo THẤT BẠI")
          print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}HẾT LƯỢT CLICK, HẾT BOOSTERS {đỏ}» {vàng}ĐỔI TÀI KHOẢN")
          break
RUN_BUNNY()"