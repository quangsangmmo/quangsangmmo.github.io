api_key = "import requests, time
import json, random, string, os
from datetime import datetime, timezone
from termcolor import colored
from function import *
version = "8.0.0"
name_tool = "hamster"
BANNER(name_tool, version)
print(f"""
{đỏ}⟩{vàng}⟩{lục}⟩ {lam}CÁC CHỨC NĂNG CỦA TOOL
{đỏ}[{vàng}+{đỏ}] {trắng}Auto điểm danh hàng ngày
{đỏ}[{vàng}+{đỏ}] {trắng}Auto làm nhiệm vụ mã morse & daily combo
{đỏ}[{vàng}+{đỏ}] {trắng}Auto random click
{đỏ}[{vàng}+{đỏ}] {trắng}Auto sử dụng booster
{đỏ}[{vàng}+{đỏ}] {trắng}Auto nâng cấp booster
{đỏ}[{vàng}+{đỏ}] {trắng}Auto nâng cấp thẻ 
{đỏ}[{vàng}+{đỏ}] {trắng}Auto hoàn thành các nhiệm vụ (ngoài Telegram)
{đỏ}[{vàng}+{đỏ}] {trắng}Auto claim lợi nhuận
""")
answer = requests.get("https://quangsangmmo.github.io/airdroptool/answer.json").json()
def ME_TELEGRAM(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/auth/me-telegram", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/auth/me-telegram", headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()["telegramUser"]
      try:
        username = getdata["username"]
      except:
        username = getdata["lastName"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return username
def CONFIG(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/config", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/config", headers=headers, timeout=30)
      response.raise_for_status()
      config = response.json()["clickerConfig"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return config
def SYNC(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/sync", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/sync", headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()["clickerUser"]
      id_user = getdata["id"]
      balance = int(getdata["balanceCoins"])
      level = getdata["level"]
      energy = getdata["availableTaps"]
      energyMax = getdata["maxTaps"]
      dame = getdata["earnPerTap"]
      recoveryEnergy = getdata["tapsRecoverPerSec"]
      exchangeId = getdata["exchangeId"]
      earnPerHour = getdata["earnPassivePerHour"]
      
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return id_user, balance, level, energy, energyMax, dame, recoveryEnergy, exchangeId, earnPerHour
def LIST_TASKS(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/list-tasks", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/list-tasks", headers=headers, timeout=30)
      response.raise_for_status()
      list_tasks = response.json()["tasks"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return list_tasks
def CHECK_TASK(headers, data, balance, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/check-task", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/check-task", headers=headers, json=data, timeout=30)
      response.raise_for_status()
      getdata = response.json()["task"]
      status = getdata["isCompleted"]
      rewardTask = getdata["rewardCoins"]
      nameTask = data["taskId"].replace("_"," ")
      if status == True:
        balance = response.json()["clickerUser"]["balanceCoins"]
        if data["taskId"] == "streak_days":
          days = getdata["days"]
          rewardTask = getdata["rewardsByDays"][days-1]["rewardCoins"]
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} HOÀN THÀNH {lam}{nameTask.upper()} {vàng}+{rewardTask} {đen}» {vàng}{int(balance):,}")
      else:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{đỏ} LÀM NHIỆM VỤ {lam}{nameTask.upper()} {đỏ}THẤT BẠI {đen}» {vàng}{balance:,}")
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return nameTask, rewardTask
def SELECT_EXCHANGE(headers, balance, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/select-exchange", headers=headers, json={"exchangeId":"okx"}, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/select-exchange", headers=headers, json={"exchangeId":"okx"})
      response.raise_for_status()
      getdata = response.json()["clickerUser"]
      exchangeId = getdata["exchangeId"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return exchangeId
def UPGRADE_INFO(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/upgrades-for-buy", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/upgrades-for-buy", headers=headers, timeout=30)
      response.raise_for_status()
      upgradesInfo = response.json()["upgradesForBuy"]
      dailyCombo = response.json()["dailyCombo"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return upgradesInfo, dailyCombo
def BUY_UPGRADE(headers, data, balance, upgradesInfo, dailyCombo, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/buy-upgrade", headers=headers, json=data,  proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/buy-upgrade", headers=headers, json=data, timeout=30)
      
      response.raise_for_status()
      balance = response.json()["clickerUser"]["balanceCoins"]
      upgradesInfo = response.json()["upgradesForBuy"]
      dailyCombo = response.json()["dailyCombo"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return balance, upgradesInfo, dailyCombo
def CLAIM_1M(headers, data, balance, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/claim-daily-cipher", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/claim-daily-cipher", headers=headers, json=data, timeout=30)
      #response.raise_for_status()
      if response.status_code == 200:
        getdata = response.json()["dailyCipher"]
        status = getdata["isClaimed"]
        if status == True:
          balance = response.json()["clickerUser"]["balanceCoins"]
          rewardCipher = getdata["bonusCoins"]
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} HOÀN THÀNH {lam}MÃ MORSE {vàng}+{rewardCipher} {đen}» {vàng}{int(balance):,}")
      else:
        if response.json()["error_code"] == "DAILY_CIPHER_DOUBLE_CLAIMED":
          pass
          #now_time = datetime.now().strftime("%H:%M:%S")
          #print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} NHIỆM VỤ {lam}MÃ MORSE {trắng}ĐÃ HOÀN THÀNH TRƯỚC ĐÓ {đen}» {vàng}{int(balance):,}")
        else:
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{đỏ} LÀM NHIỆM VỤ {lam}MÃ MORSE {đỏ}THẤT BẠI {đen}» {vàng}{int(balance):,}")
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return balance
def CLAIM_5M(headers, balance, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/claim-daily-combo", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/claim-daily-combo", headers=headers, timeout=30)
      #response.raise_for_status()
      if response.status_code == 200:
        getdata = response.json()["dailyCombo"]
        status = getdata["isClaimed"]
        if status == True:
          balance = response.json()["clickerUser"]["balanceCoins"]
          rewardCipher = getdata["bonusCoins"]
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} HOÀN THÀNH {lam}DAILY COMBO {vàng}+{rewardCipher} {đen}» {vàng}{int(balance):,}\n")
      else:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{đỏ} LÀM NHIỆM VỤ {lam}DAILY COMBO {đỏ}THẤT BẠI {đen}» {vàng}{balance:,}\n")
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return balance
def BOOSTS(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/boosts-for-buy", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/boosts-for-buy", headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()["boostsForBuy"]
      tapConfig = getdata[0]
      energyConfig = getdata[1]
      fullenergyConfig = getdata[2]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return tapConfig, energyConfig, fullenergyConfig
def LEVEL_UP(headers, typeUpgrade, balance, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      timestamp = int(time.time() * 1000)
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/buy-boost", headers=headers, json={"boostId":typeUpgrade,"timestamp":timestamp}, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/buy-boost", headers=headers, json={"boostId":typeUpgrade,"timestamp":timestamp})
      response.raise_for_status()
      getdata = response.json()["clickerUser"]
      balance = int(getdata["balanceCoins"])
      energy = getdata["availableTaps"]
      dame = getdata["earnPerTap"]
      energyMax = getdata["maxTaps"]
      getdata = response.json()["boostsForBuy"]
      tapConfig = getdata[0]
      energyConfig = getdata[1]
      fullenergyConfig = getdata[2]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return balance, energy, dame, tapConfig, energyConfig, fullenergyConfig, energyMax
def TAP(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/tap", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.hamsterkombatgame.io/clicker/tap", headers=headers, json=data, timeout=30)
      response.raise_for_status()
      getdata = response.json()["clickerUser"]
      balance = int(getdata["balanceCoins"])
      energy = getdata["availableTaps"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool HAMSTER")
      RUN_HAMSTER()
      break
    COUNTDOWN(10)
  return balance, energy

def UPGRADE(balance, tapConfig, energyConfig, fullenergyConfig, energy, dame):
  while balance > energyConfig["price"]:
    typeUpgrade = energyConfig["id"]
    level = energyConfig["level"]
    price = energyConfig["price"]
    balance, energy, dame, tapConfig, energyConfig, fullenergyConfig, energyMax = LEVEL_UP(headers,typeUpgrade, proxies)
    now_time = datetime.now().strftime("%H:%M:%S")
    print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Nâng cấp {hồng}{typeUpgrade} {trắng}({lam}{level+1}{trắng}) {lục}• {đỏ}-{price} {đen}» {vàng}{balance:,}")
  return balance, tapConfig, energyConfig, fullenergyConfig, energy, dame

def RUN_HAMSTER():
  with open('config/hamster.json', 'r', encoding='utf-8') as file:
    config_data = json.loads(remove_comments(file.read()))
  users = config_data
  if len(users) > 10:
    print("Bạn chỉ được phép thêm tối đa 10 tài khoản để chạy tool")
    exit()
  for user in users:
    account = user["STT_ACCOUNT"]
    authorization = user["AUTHORIZATION"]
    if authorization == "" or authorization == "thay_thế_bằng_authorization":
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}Tài khoản {vàng}{account.split('_')[1]} {đỏ}DATA đang bị trống")
      continue
    with open('config/setting.json', 'r', encoding='utf-8') as file:
      config_acc = json.loads(remove_comments(file.read()))[account]
    proxy_list = config_acc["proxy"]
    type_proxy = config_acc["type_proxy"]
    user_agent = config_acc["user-agent"]
    if proxy_list != "":
      proxy_list = proxy_list.split(":")
      proxy = f"{type_proxy}://{proxy_list[2]}:{proxy_list[3]}@{proxy_list[0]}:{proxy_list[1]}"
      proxies = {
      'http': proxy,
      'https': proxy,}
    else:
      if account.split('_')[1] != "1":
        print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng} Chuyển tài khoản do không có proxy")
        continue
      proxies = ""
    ip, fakeip = getIP(proxies)
    if ip == fakeip == None:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}\nĐỔI TÀI KHOẢN DO KHÔNG LẤY ĐƯỢC IP, HÃY KIỂM TRA LẠI PROXY\n")
      continue
    headers = {
      "Host":"api.hamsterkombatgame.io",
      "Connection":"keep-alive",
      "sec-ch-ua":'"Android WebView";v="125", "Chromium";v="125", "Not.A/Brand";v="24"',
      "sec-ch-ua-mobile":"?1",
      "Authorization":authorization,
      "User-Agent":user_agent,
      "sec-ch-ua-platform": '"Android"',
      "accept": "*/*",
      "origin": "http://hamsterkombatgame.io",
      "x-requested-with": "mark.via.gx",
      "sec-fetch-site": "same-site",
      "sec-fetch-mode": "cors",
      "sec-fetch-dest": "empty",
      "referer": "http://hamsterkombatgame.io",
      "accept-encoding": "gzip, deflate, br, zstd",
      "priority": "u=1, i"
    }
    username = ME_TELEGRAM(headers, proxies)
    config = CONFIG(headers, proxies)
    id_user, balance, level, energy, energyMax, dame, recoveryEnergy, exchangeId, earnPerHour = SYNC(headers, proxies)
    upgradesInfo, dailyCombo = UPGRADE_INFO(headers, proxies)
    print(f"""{đậm}{đen}<<<<<<<<<<<<<<<<<{lam}[{vàngBG}{đỏ}THÔNG TIN TÀI KHOẢN HAMSTER{đenBG}{lam}]{đen}>>>>>>>>>>>>>>>>>\n{đen}〘👤〙{trắng}UserName {đỏ}: {lục}{username} {trắng}({hồng}{account.split('_')[1]}{trắng})\n{đen}〘🪙〙{trắng}Số Dư {đỏ}: {vàng}{balance:,} {đen}| {vàng}+{earnPerHour:,}{đỏ}/{vàng}h\n{đen}〘📊〙{trắng}Thông số Game{đỏ}: {lục}+{dame}{đen}/{lục}click {đỏ}[{lam}{energy}{đen}/{lam}{energyMax}{đỏ}]\n{đen}〘🌏〙{trắng}IP {đỏ}: {nâu}{ip} {lục}»»» {trắng}Fake IP {đỏ}: {lam}{fakeip}\n""")
    start_time = datetime.now()
    print(f"{đỏ}\033[1;33;40mBẮT ĐẦU CHẠY TOOL {thường}{đậm}{đỏ}» {đen}[{vàng}{start_time.strftime('%H:%M:%S')}{đen}]\n")
    if dailyCombo["isClaimed"] == False:
      print(f"{trắng}Thẻ đã thu thập {vàng}{dailyCombo['upgradeIds']}\n")
    if exchangeId == None or exchangeId == "hamster":
      exchangeId = SELECT_EXCHANGE(headers, proxies)
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}ĐÃ CHỌN SÀN {lam}{exchangeId.upper()}")
    list_tasks = LIST_TASKS(headers, proxies)
    for task in list_tasks:
      if task["isCompleted"] == False and task["id"] != "invite_friends":
        nameTask, rewardTask = CHECK_TASK(headers, {"taskId":task["id"]}, balance, proxies)
    #Mật mã
    balance = CLAIM_1M(headers, {"cipher":answer["morse_hamster"]}, balance, proxies)
    totalNoAvailable = 0
    totalIsAvailable = 0
    tapConfig, energyConfig, fullenergyConfig = BOOSTS(headers, proxies)
    #Combo
    if str(datetime.now().strftime("%d/%m/%Y/%H/%M/%S")) < answer["date_expired"]:
      list1 = answer["list_combo"]
    else:
      list1 = []
    list2 = dailyCombo["upgradeIds"]
    data_5M = list1.copy()
    for item in list2:
        if item in data_5M:
            data_5M.remove(item)
    def UPDATE_COMBO(id_5M,upgradesInfo, dailyCombo, balance, earnPerHour, targetLV_5M, proxies):
      for u in upgradesInfo:
        if id_5M == u["id"]:
          id_5M = u["id"]
          name_5M = u["name"]
          profit_5M = u["profitPerHourDelta"]
          price_5M = u["price"]
          DK_5M = u["condition"]
          level_5M = u["level"]
          isAvailable_5M = u["isAvailable"]
          delay = 0
          try:
            delay = u["cooldownSeconds"]
          except: 
            delay = 0
          if delay != 0:
            print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}Cần phải chờ {vàng}{delay} {trắng}giây để nâng cấp {lục}{name_5M}\n")
            return upgradesInfo, balance, earnPerHour, level_5M
            break
          if DK_5M != None:
            if isAvailable_5M == False and DK_5M["_type"] == "ByUpgrade":
              id_CON = DK_5M["upgradeId"]
              targetLV_CON = DK_5M["level"]+1
              name_CON = ""
              for con in upgradesInfo:
                if id_CON == con["id"]:
                  name_CON = con["name"]
                  break
              print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}Cần nâng {lục}{name_CON} {trắng}lên level {lam}{targetLV_CON} {trắng}để nâng {lục}{name_5M} {trắng}lên level {lam}{targetLV_5M}\n")
              upgradesInfo, balance, earnPerHour, level_CON = UPDATE_COMBO(id_CON,upgradesInfo, dailyCombo, balance, earnPerHour, targetLV_CON, proxies)
              now_time = datetime.now().strftime("%H:%M:%S")
              if level_CON >= targetLV_CON:
                print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã nâng cấp {lục}{name_CON} {trắng}({lam}{targetLV_CON}{trắng})\n")
              else:
                print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Chưa nâng cấp {lục}{name_CON} {trắng}lên level {lam}{targetLV_CON} {trắng}({lam}{level_CON}{trắng})\n")
                return upgradesInfo, balance, earnPerHour, level_5M
            elif u["condition"]["_type"] == "MoreReferralsCount" and DK_5M == False:
              moreRef = u["condition"]["moreReferralsCount"]
              print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}Cần có thêm {vàng}{moreRef} Referral {đỏ}để nâng cấp thẻ {hồng}{u['name']}")
              return upgradesInfo, balance, earnPerHour, level_5M
              break
          while isAvailable_5M == True and level_5M < targetLV_5M and balance > price_5M:
            if price_5M > 5000000:
              print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}BỎ QUA NÂNG CẤP {lục}{name_5M} {trắng}DO GIÁ QUÁ CAO {lục}({vàng}{price_5M:,}{lục})")
              break
            timestamp = int(time.time() * 1000)
            newbalance, upgradesInfo, dailyCombo = BUY_UPGRADE(headers, {"upgradeId":id_5M,"timestamp":timestamp}, balance, upgradesInfo, dailyCombo, proxies)
            earnPerHour += profit_5M
            if balance > newbalance:
              balance = newbalance
              now_time = datetime.now().strftime("%H:%M:%S")
              print(f"{đen}╔══{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Nâng cấp {lam}COMBO {lục}{name_5M} {trắng}({lam}{level_5M}{trắng})")
              print(f"{đen}╚══⫸ {đỏ}-{price_5M:,} {lục}• {vàng}+{profit_5M:,}{đỏ}/{vàng}h {lục}»» {vàng}{earnPerHour:,}{đỏ}/{vàng}h {đen}»»» {vàng}{int(balance):,}\n")
            else:
              now_time = datetime.now().strftime("%H:%M:%S")
              print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Nâng cấp {lam}COMBO {lục}{name_5M} {đỏ}THẤT BẠI\n")
              return upgradesInfo, balance, earnPerHour, level_5M
              break
            for i in upgradesInfo:
              if str(i["id"]) == id_5M:
                delay = 0
                try:
                  delay = i["cooldownSeconds"]
                except: 
                  delay = 0
                if delay != 0:
                  print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}Cần phải chờ {vàng}{delay} {trắng}giây để nâng cấp {lục}{name_5M}\n")
                  return upgradesInfo, balance, earnPerHour, level_5M
                  break
                profit_5M = i["profitPerHourDelta"]
                price_5M = i["price"]
                DK_5M = i["isAvailable"]
                level_5M = i["level"]
                break
          if balance < price_5M:
            print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}Thiếu tiền nâng cấp {lục}{name_5M} {vàng}Price {price_5M:,} {đen}» {vàng}{balance:,}")
            return upgradesInfo, balance, earnPerHour, level_5M
            break
          break
      return upgradesInfo, balance, earnPerHour, level_5M
    for i in data_5M:
      for u in upgradesInfo:
        if u["id"] == i:
          id_5M = u["id"]
          name_5M = u["name"]
          profit_5M = u["profitPerHourDelta"]
          price_5M = u["price"]+1
          DK_5M = u["condition"]
          targetLV_5M = u["level"]+1
          isAvailable_5M = u["isAvailable"]
          upgradesInfo, balance, earnPerHour, level_5M = UPDATE_COMBO(id_5M,upgradesInfo, dailyCombo, balance, earnPerHour, targetLV_5M, proxies)
          now_time = datetime.now().strftime("%H:%M:%S")
          if level_5M >= targetLV_5M:
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã nâng cấp {lam}COMBO {lục}{name_5M} {trắng}({lam}{targetLV_5M}{trắng}\n")
          else:
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Chưa nâng cấp {lam}COMBO {lục}{name_5M} {trắng}lên level {lam}{targetLV_5M} {trắng}({lam}{level_5M}{trắng})\n")
          break
    if dailyCombo["isClaimed"] == False:
      balance = CLAIM_5M(headers, balance, proxies)
    else:
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}Đã nhận {vàng}5M {trắng}ngày hôm nay\n")
    while True:
      if energy/dame > 10:
        if energy/dame > 200:
          countTap = random.randint(100,200)
        else:
          countTap = int(energy/dame)
        timestamp = int(time.time() * 1000)
        amount = dame*countTap
        newbalance, energy = TAP(headers, {"count":countTap,"availableTaps":energy-countTap*dame,"timestamp":timestamp}, proxies)
        collectAmount = newbalance - balance
        balance = newbalance
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đen}╔═{đỏ}[{vàng}{now_time}{đỏ}] {trắng}Đã CLICK {lục}{countTap} {trắng}lần {vàng}+{collectAmount:,} {đỏ}»", end=" ")
        print(f"{vàng}{newbalance:,}\n{đen}╚⫸{hồng}Link tool & hướng dẫn tại Telegram{đỏ}: {lục}@AirdropToolChannel\n")
      else:
        tapConfig, energyConfig, fullenergyConfig = BOOSTS(headers, proxies)
        if fullenergyConfig["level"] <= fullenergyConfig["maxLevel"] and fullenergyConfig["cooldownSeconds"] == 0:
          balance, energy, dame, tapConfig, energyConfig, newfullenergyConfig, energyMax = LEVEL_UP(headers,"BoostFullAvailableTaps", proxies)
          if fullenergyConfig["level"] < newfullenergyConfig["level"]:
            fullenergyConfig = newfullenergyConfig
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã kích hoạt Full Energy", end=" ")
            print(f"{đỏ}[{lam}{energy}{đen}/{lam}{energyMax}{đỏ}]\n")
          else:
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Đã kích hoạt Full Energy THẤT BẠI")
        else:
          break
    list_upgrade = []
    list_upgrade_Combo = []
    for upgrade in upgradesInfo:
      delay = 0
      id_upgrade = upgrade["id"]
      name_upgrade = upgrade["name"]
      profit_upgrade = upgrade["profitPerHourDelta"]
      price_upgrade = upgrade["price"]+1
      DK_upgrade = upgrade["condition"]
      level_upgrade = upgrade["level"]
      isAvailable_upgrade = upgrade["isAvailable"]
      isExpired_upgrade = upgrade["isExpired"]
      delay = 0
      try:
        delay = upgrade["cooldownSeconds"]
      except:
        delay = 0
      if int(delay) > 0:
        isAvailable_upgrade = False
        continue
      if isExpired_upgrade == False and isAvailable_upgrade == True and profit_upgrade*24*30 > price_upgrade and delay == 0:
        infoItem = f"{profit_upgrade/price_upgrade}|{profit_upgrade}|{price_upgrade}|{id_upgrade}|{level_upgrade}|{name_upgrade}|{isAvailable_upgrade}|"
        infoItem += (250-len(infoItem))*"x"
        list_upgrade.append(infoItem)
    list_upgrade = sorted(list_upgrade, key=lambda x: float(x.split('|')[0]), reverse=True)
    print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}HIỆN CÓ {lam}{len(list_upgrade)} {trắng}THẺ LỢI NHUẬN CAO CÓ THỂ NÂNG CẤP")
    #print(list_upgrade)
    for i in range(0,len(list_upgrade)):
      upgrade = list_upgrade[i]
      if upgrade != list_upgrade[-1]:
        next_TB = list_upgrade[i+1]
        next_TB = float(next_TB.split('|')[0])
      upgradeInfo = upgrade.split('|')
      priceTB = float(upgradeInfo[0])
      profit_upgrade = int(upgradeInfo[1])
      price_upgrade = int(upgradeInfo[2])
      id_upgrade = upgradeInfo[3]
      level_upgrade = int(upgradeInfo[4])
      name_upgrade = upgradeInfo[5]
      isAvailable_upgrade = upgradeInfo[6]
      if balance < price_upgrade:
        print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}THIẾU TIỀN NÂNG {lục}{name_upgrade} {vàng}{profit_upgrade:,}{đỏ}/{vàng}h {đen}| {đỏ}{price_upgrade} {đen}» {vàng}{balance:,}")
        continue
      while balance > price_upgrade and isAvailable_upgrade == "True" and earnPerHour < 3000000:
        timestamp = int(time.time() * 1000)
        if len(list_upgrade) > 1:
          if upgrade != list_upgrade[-2] and id_upgrade not in list_upgrade:
            if profit_upgrade/price_upgrade < next_TB:
              break
        newbalance, newupgradesInfo, dailyCombo = BUY_UPGRADE(headers, {"upgradeId":id_upgrade,"timestamp":timestamp}, balance, upgradesInfo, dailyCombo, proxies)
        earnPerHour += profit_upgrade
        if balance > newbalance:
          balance = newbalance
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đen}╔══{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Nâng cấp thẻ {lục}{name_upgrade} {trắng}({lam}{level_upgrade+1}{trắng})")
          print(f"{đen}╚══⫸ {đỏ}-{price_upgrade:,} {lục}• {vàng}+{profit_upgrade:,}{đỏ}/{vàng}h {lục}»» {vàng}{earnPerHour:,}{đỏ}/{vàng}h {đen}»»» {vàng}{int(balance):,}\n")
          if len(dailyCombo["upgradeIds"]) == 3 and dailyCombo["isClaimed"] == False:
            balance = CLAIM_5M(headers, balance, proxies)
        else:
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Nâng cấp {lục}{name_upgrade} {đỏ}THẤT BẠI")
          break
        if upgrade == list_upgrade[-1]:
          break
        for i in newupgradesInfo:
          if str(i["id"]) == id_upgrade:
            delay = 0
            try:
              delay = i["cooldownSeconds"]
            except: 
              delay = 0
            if delay != 0:
              isAvailable_upgrade = False
              break
            profit_upgrade = i["profitPerHourDelta"]
            price_upgrade = i["price"]
            isAvailable_upgrade = str(i["isAvailable"])
            level_upgrade = i["level"]
            break
    print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}KHÔNG CÒN THẺ LỢI NHUẬN CAO PHÙ HỢP ĐỂ NÂNG CẤP")
    print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}HẾT LƯỢT CLICK, HẾT BOOSTERS {đỏ}» {vàng}ĐỔI TÀI KHOẢN")
RUN_HAMSTER()"