api_key = "import requests, time
import json, random, string, os
from datetime import datetime, timezone
from termcolor import colored
from function import *
version = "6.0.0"
name_tool = "timefarm"
BANNER(name_tool, version)
print(f"""
{đỏ}⟩{vàng}⟩{lục}⟩ {lam}CÁC CHỨC NĂNG CỦA TOOL
{đỏ}[{vàng}+{đỏ}] {trắng}Auto start farm 
{đỏ}[{vàng}+{đỏ}] {trắng}Auto claim farm
{đỏ}[{vàng}+{đỏ}] {trắng}Auto nâng cấp 
{đỏ}[{vàng}+{đỏ}] {trắng}Auto staking
{đỏ}[{vàng}+{đỏ}] {trắng}Auto hoàn thành các nhiệm vụ (ngoài Telegram)
{đỏ}[{vàng}+{đỏ}] {trắng}Auto làm nhiệm vụ trả lời câu hỏi
""")
answer = requests.get("https://quangsangmmo.github.io/airdroptool/answer.json").json()
def getUserInfo(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  headers["content-length"] = str(len(str(data).replace(" ","")))
  while True:
    try:
      if proxies:
        response = requests.post("https://tg-bot-tap.laborx.io/api/v1/auth/validate-init/v2", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://tg-bot-tap.laborx.io/api/v1/auth/validate-init/v2",headers=headers, json=data, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      token = getdata["token"]
      balance = getdata["balanceInfo"]["balance"]
      level = getdata["info"]["level"]
      levelInfo = getdata["levelDescriptions"]
      headers.pop("content-length")
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool TIMEFARM")
      RUN_TIMEFARM()
      break
    COUNTDOWN(10)
  return token, balance, level, levelInfo
def farmInfo(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://tg-bot-tap.laborx.io/api/v1/farming/info", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://tg-bot-tap.laborx.io/api/v1/farming/info",headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      balance = getdata["balance"]
      timeStartFarm = getdata["activeFarmingStartedAt"]
      timeFarm = getdata["farmingDurationInSec"]
      rewardFarm = getdata["farmingReward"]
      if timeStartFarm == None:
        balance, timeStartFarm, timeFarm, rewardFarm = startFarm(headers, proxies)
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool TIMEFARM")
      RUN_TIMEFARM()
      break
    COUNTDOWN(10)
  return balance, timeStartFarm, timeFarm, rewardFarm
def claimFarm(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://tg-bot-tap.laborx.io/api/v1/farming/finish", headers=headers, json={}, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://tg-bot-tap.laborx.io/api/v1/farming/finish",headers=headers, json={})
      response.raise_for_status()
      getdata = response.json()
      balance = getdata["balance"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool TIMEFARM")
      RUN_TIMEFARM()
      break
    COUNTDOWN(10)
  return balance
def startFarm(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://tg-bot-tap.laborx.io/api/v1/farming/start", headers=headers, json={}, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://tg-bot-tap.laborx.io/api/v1/farming/start",headers=headers, json={})
      response.raise_for_status()
      getdata = response.json()
      balance = getdata["balance"]
      timeStartFarm = getdata["activeFarmingStartedAt"]
      timeFarm = getdata["farmingDurationInSec"]
      rewardFarm = getdata["farmingReward"]
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã bắt đầu FARM {vàng}+{rewardFarm:,} {lục}sau khi kết thúc")
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool TIMEFARM")
      RUN_TIMEFARM()
      break
    COUNTDOWN(10)
  return balance, timeStartFarm, timeFarm, rewardFarm
def tasksInfo(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://tg-bot-tap.laborx.io/api/v1/tasks", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://tg-bot-tap.laborx.io/api/v1/tasks",headers=headers, timeout=30)
      response.raise_for_status()
      tasksList = response.json()
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool TIMEFARM")
      RUN_TIMEFARM()
      break
    COUNTDOWN(10)
  return tasksList
def startTask(headers, id_task, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post(f"https://tg-bot-tap.laborx.io/api/v1/tasks/{id_task}/submissions", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.post(f"https://tg-bot-tap.laborx.io/api/v1/tasks/{id_task}/submissions",headers=headers, timeout=30)
      response.raise_for_status()
      status = response.status_code
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool TIMEFARM")
      RUN_TIMEFARM()
      break
    COUNTDOWN(10)
  return status
def claimTask(headers, id_task, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post(f"https://tg-bot-tap.laborx.io/api/v1/tasks/{id_task}/claims", headers=headers, json={}, proxies=proxies, timeout=30)
      else:
        response = requests.post(f"https://tg-bot-tap.laborx.io/api/v1/tasks/{id_task}/claims",headers=headers, json={})
      response.raise_for_status()
      status = response.status_code
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool TIMEFARM")
      RUN_TIMEFARM()
      break
    COUNTDOWN(10)
  return status
def getBalance(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get(f"https://tg-bot-tap.laborx.io/api/v1/balance", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get(f"https://tg-bot-tap.laborx.io/api/v1/balance",headers=headers, timeout=30)
      response.raise_for_status()
      balance = response.json()["balance"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool TIMEFARM")
      RUN_TIMEFARM()
      break
    COUNTDOWN(10)
  return balance
def upgrade(headers, proxies=None):
  error_count = 0
  max_retries = 10
  headers["content-length"] = "2"
  while True:
    try:
      if proxies:
        response = requests.post(f"https://tg-bot-tap.laborx.io/api/v1/me/level/upgrade", headers=headers, json={}, proxies=proxies, timeout=30)
      else:
        response = requests.post(f"https://tg-bot-tap.laborx.io/api/v1/me/level/upgrade",headers=headers, json={}, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      balance = getdata["balance"]
      level = getdata["level"]
      timeFarm = getdata["farmingInfo"]["farmingDurationInSec"]
      rewardFarm = getdata["farmingInfo"]["farmingReward"]
      headers.pop("content-length")
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool TIMEFARM")
      RUN_TIMEFARM()
      break
    COUNTDOWN(10)
  return balance, level, timeFarm, rewardFarm
def STAKING_ACTIVE(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get(f"https://tg-bot-tap.laborx.io/api/v1/staking/active", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get(f"https://tg-bot-tap.laborx.io/api/v1/staking/active",headers=headers, timeout=30)
      response.raise_for_status()
      options = response.json()["stakingInfo"]["options"]
      stakes = response.json()["stakes"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool TIMEFARM")
      RUN_TIMEFARM()
      break
    COUNTDOWN(10)
  return options, stakes
def STAKING(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  headers["content-length"] = str(len(str(data).replace(" ","")))
  while True:
    try:
      if proxies:
        response = requests.post(f"https://tg-bot-tap.laborx.io/api/v1/staking", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post(f"https://tg-bot-tap.laborx.io/api/v1/staking",headers=headers, json=data, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      options = response.json()["stakingInfo"]["options"]
      stakes = response.json()["stakes"]
      headers.pop("content-length")
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool TIMEFARM")
      RUN_TIMEFARM()
      break
    COUNTDOWN(10)
  return options, stakes

def DAILY_QUEST(headers, data, METHOD, proxies=None):
  error_count = 0
  max_retries = 10
  headers["content-length"] = str(len(str(data).replace(" ","")))
  while True:
    try:
      if proxies:
        if METHOD == "post":
          response = requests.post(f"https://tg-bot-tap.laborx.io/api/v1/daily-questions", headers=headers, json=data, proxies=proxies, timeout=30)
        else:
          response = requests.get(f"https://tg-bot-tap.laborx.io/api/v1/daily-questions", headers=headers, proxies=proxies, timeout=30)
      else:
        if METHOD == "post":
          response = requests.post(f"https://tg-bot-tap.laborx.io/api/v1/daily-questions",headers=headers, json=data, timeout=30)
        else:
          response = requests.get(f"https://tg-bot-tap.laborx.io/api/v1/daily-questions",headers=headers, timeout=30)
      response.raise_for_status()
      getdata = response.json()
      #print(getdata)
      if METHOD == "post":
        isCorrect = getdata["isCorrect"]
      else:
        if "answer" in getdata:
          isCorrect = getdata["answer"]["isCorrect"]
        else:
          isCorrect = False
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool TIMEFARM")
      RUN_TIMEFARM()
      break
    COUNTDOWN(10)
  return isCorrect

def RUN_TIMEFARM():
  with open('config/timefarm.json', 'r', encoding='utf-8') as file:
    config_data = json.loads(remove_comments(file.read()))
  users = config_data
  if len(users) > 10:
    print("Bạn chỉ được phép thêm tối đa 10 tài khoản để chạy tool")
    exit()
  for user in users:
    account = user["STT_ACCOUNT"]
    authorization = user["AUTHORIZATION"]
    if authorization == "" or authorization == "thay_thế_bằng_authorization":
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}Tài khoản {vàng}{account.split('_')[1]} {đỏ}authorization đang bị trống")
      continue
    with open('config/setting.json', 'r', encoding='utf-8') as file:
      config_acc = json.loads(remove_comments(file.read()))[account]
    proxy_list = config_acc["proxy"]
    type_proxy = config_acc["type_proxy"]
    user_agent = config_acc["user-agent"]
    if proxy_list != "":
      proxy_list = proxy_list.split(":")
      proxy = f"{type_proxy}://{proxy_list[2]}:{proxy_list[3]}@{proxy_list[0]}:{proxy_list[1]}"
      proxies = {
      'http': proxy,
      'https': proxy,}
    else:
      if account.split('_')[1] != "1":
        print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}Chuyển tài khoản do không có proxy")
        continue
      proxies = ""
    ip, fakeip = getIP(proxies)
    if ip == fakeip == None:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}\nĐỔI TÀI KHOẢN DO KHÔNG LẤY ĐƯỢC IP, HÃY KIỂM TRA LẠI PROXY\n")
      continue
    headers = {
      "Host": "tg-bot-tap.laborx.io",
      "sec-ch-ua": '"Not/A)Brand";v="8", "Chromium";v="126", "Android WebView";v="126"',
      "sec-ch-ua-platform": '"Android"',
      "sec-ch-ua-mobile": "?1",
      "user-agent": user_agent,
      "content-type": "application/json",
      "accept": "*/*",
      "origin": "https://tg-tap-miniapp.laborx.io",
      "sec-fetch-site": "same-site",
      "sec-fetch-mode": "cors",
      "sec-fetch-dest": "empty",
      "referer": "https://tg-tap-miniapp.laborx.io/",
      "accept-encoding": "gzip, deflate, br, zstd",
      "accept-language": "vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7",
      "priority": "u=1, i"}
    #token, balance, level, levelInfo = getUserInfo(headers, data, proxies)
    headers["Authorization"] = authorization
    balance, timeStartFarm, timeFarm, rewardFarm = farmInfo(headers, proxies)
    print(f"""{đậm}{đen}««««««««««««««««{lam}[{vàngBG}{đỏ}THÔNG TIN TÀI KHOẢN TIMEFARM{đenBG}{lam}]{đen}»»»»»»»»»»»»»»»»»\n{đen}〘👤〙{trắng}Tài khoản {đỏ}: {trắng}({hồng}{account.split('_')[1]}{trắng})\n{đen}〘🪙〙{trắng}Số Dư {đỏ}: {vàng}{balance}\n{đen}〘🌏〙{trắng}IP {đỏ}: {nâu}{ip} {lục}»»» {trắng}Fake IP {đỏ}: {lam}{fakeip}\n""")
    start_time = datetime.now()
    print(f"{đỏ}\033[1;33;40mBẮT ĐẦU CHẠY TOOL {thường}{đậm}{đỏ}» {đen}[{vàng}{start_time.strftime('%H:%M:%S')}{đen}]\n")
    options, stakes = STAKING_ACTIVE(headers, proxies)
    for stake in stakes:
      amount = stake["amount"]
      percent = stake["percent"]
      day = stake["duration"]
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}Hiện đang {lam}STAKING {vàng}{amount:,} {trắng}với option {hồng}{percent}%{đen}/{hồng}{day}ngày")
    print()
    tasks = tasksInfo(headers, proxies)
    for task in tasks:
      id_task = task["id"]
      title_task = task["title"]
      reward_task = task["reward"]
      if "Subscribe" not in title_task:
        if "submission" in task:
          if task["submission"]["status"] == "CLAIMED":
            continue
          if task["submission"]["status"] == "COMPLETED":
            status = claimTask(headers, id_task, proxies)
            if status == 200:
              balance = getBalance(headers, proxies)
              now_time = datetime.now().strftime("%H:%M:%S")
              print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} Hoàn thành {lam}{title_task} {vàng}+{reward_task} {đen}» {vàng}{balance:,}")
            else:
              now_time = datetime.now().strftime("%H:%M:%S")
              print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{đỏ} Hoàn thành {lam}{title_task} {đỏ}THẤT BẠI")
          else:
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{đỏ} Tool không thể làm nhiệm vụ {lam}{title_task}")
        else:
          status = startTask(headers, id_task, proxies)
          if status == 200:
            status = claimTask(headers, id_task, proxies)
            if status == 200:
              balance = getBalance(headers, proxies)
              now_time = datetime.now().strftime("%H:%M:%S")
              print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} Hoàn thành {lam}{title_task} {vàng}+{reward_task} {đen}» {vàng}{balance:,}")
            else:
              now_time = datetime.now().strftime("%H:%M:%S")
              print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{đỏ} Hoàn thành {lam}{title_task} {đỏ}THẤT BẠI")
          else:
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{đỏ} Làm NV {lam}{title_task} {đỏ}THẤT BẠI")
    """if str(levelInfo[-1]["level"]) != str(level):
      while balance > levelInfo[level+1]["price"]:
        balance, level, timeFarm, rewardFarm = upgrade(headers, proxies)
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã nâng cấp lên level {trắng}({lam}{level}{trắng}) {đỏ}-{levelInfo[level]['price']:,} {đen}» {vàng}{balance:,}")"""
    if str(datetime.now().strftime("%d/%m/%Y/%H/%M/%S")) < answer["date_expired"] and answer["answer_quest"] != "":
      isCorrect = DAILY_QUEST(headers, "", "get", proxies=None)
      if isCorrect == False:
        isCorrect = DAILY_QUEST(headers, {"answer":answer["answer_quest"]}, "post", proxies=None)
        now_time = datetime.now().strftime("%H:%M:%S")
        if isCorrect == True:
          balance = getBalance(headers, proxies)
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã hoàn thành {lam}Oracle of Time {đen}» {vàng}{balance}")
        else:
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Trả lời {lam}Oracle of Time {đỏ}thất bại")
    balance = balance.split('.')[0]
    if balance > "0" and len(stakes) < 3:
      options, stakes = STAKING(headers, {"optionId":"1","amount":balance}, proxies)
      amount = stakes[-1]["amount"]
      percent = stakes[-1]["percent"]
      day = stakes[-1]["duration"]
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Bắt đầu {lam}STAKING {vàng}{amount:,} {trắng}với option {hồng}{percent}%{đen}/{hồng}{day}ngày")
    timeStart = datetime.strptime(timeStartFarm, "%Y-%m-%dT%H:%M:%S.%fZ")
    timeStart = timeStart.replace(tzinfo=timezone.utc)
    timestamp = int(timeStart.timestamp() * 1000)
    if timestamp+timeFarm*1000 < int(time.time()*1000):
      balance = claimFarm(headers, proxies)
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã Claim FARM {vàng}+{rewardFarm:,} {đỏ}» {vàng}{balance:,}")
      balance, timeStartFarm, timeFarm, rewardFarm = startFarm(headers, proxies)
    else:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Chưa đến thời gian nhận {lam}Farm Rewards")
    print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}HẾT NHIỆM VỤ VÀ LƯỢT CLAIM {đỏ}» {vàng}ĐỔI TÀI KHOẢN")
RUN_TIMEFARM()"