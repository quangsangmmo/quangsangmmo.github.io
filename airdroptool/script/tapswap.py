api_key = "import requests, time
import json, random, string, os
from datetime import datetime, timezone
from termcolor import colored
from function import *
version = "6.0.0"
name_tool = "tapswap"
BANNER(name_tool, version)

def LOGIN(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  headers["Content-Length"] = str(len(str(data).replace(" ","")))
  access_token = username = energy = balance = ligue = dame = energy_level = charge_level = countTurbo = countFullEnergy = None
  while True:
    try:
      if proxies:
        response = requests.post("https://api.tapswap.ai/api/account/login", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.tapswap.ai/api/account/login", headers=headers, json=data, timeout=30)
      response.raise_for_status()
      access_token = response.json()["access_token"]
      getdata = response.json()["player"]
      username = getdata["name"]
      energy = getdata["energy"]
      balance = getdata["shares"]
      ligue = getdata["ligue"]
      dame = getdata["tap_level"]
      energy_level = getdata["energy_level"]
      charge_level = getdata["charge_level"]
      countTurbo = getdata["boost"][1]["cnt"]
      countFullEnergy = getdata["boost"][0]["cnt"]
      conf = response.json()["conf"]
      break
    except requests.exceptions.RequestException as e:
      error_count += 1
      print(f"{đỏ}Hàm LOGIN, đang xảy ra lỗi. Thử lại lần {vàng}{error_count}{đen}/{vàng}{max_retries}{đỏ}. Lỗi: {str(e)}")
      if error_count >= max_retries:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} Đã gặp lỗi quá 10 lần, khởi chạy hàm RUN_TAPSWAP()")
        RUN_TAPSWAP()
        break
      COUNTDOWN(10)
    except (ValueError, KeyError) as e:
      error_count += 1
      print(f"{đỏ}Hàm LOGIN, Error: {str(e)}. Thử lại lần {vàng}{error_count}{đen}/{vàng}{max_retries}{đỏ}")
      if error_count >= max_retries:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} Đã gặp lỗi quá 10 lần, khởi chạy hàm RUN_TAPSWAP()")
        RUN_TAPSWAP()
        break
      COUNTDOWN(10)
  return access_token, username, energy, balance, ligue, dame, energy_level, charge_level, countTurbo, countFullEnergy, conf

def SUBMIT_TAPS(headers, content_id, data, proxies=None):
  error_count = 0
  max_retries = 10
  headers["Content-Length"] = str(len(str(data).replace(" ","")))
  headers["Content-Id"] = str(content_id)
  username = energy = balance  = None
  while True:
    try:
      if proxies:
        response = requests.post("https://api.tapswap.ai/api/player/submit_taps", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.tapswap.ai/api/player/submit_taps", headers=headers, json=data, timeout=30)
      response.raise_for_status()
      getdata = response.json()["player"]
      energy = getdata["energy"]
      balance = getdata["shares"]
      headers.pop("Content-Id")
      headers.pop("Content-Length")
      break
    except requests.exceptions.RequestException as e:
      error_count += 1
      print(f"{đỏ}Hàm SUBMIT_TAPS, đang xảy ra lỗi. Thử lại lần {vàng}{error_count}{đen}/{vàng}{max_retries}{đỏ}. Lỗi: {str(e)}")
      if error_count >= max_retries:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} Đã gặp lỗi quá 10 lần, khởi chạy hàm RUN_TAPSWAP()")
        RUN_TAPSWAP()
        break
      COUNTDOWN(10)
    except (ValueError, KeyError) as e:
      error_count += 1
      print(f"{đỏ}Hàm SUBMIT_TAPS, Error: {str(e)}. Thử lại lần {vàng}{error_count}{đen}/{vàng}{max_retries}{đỏ}")
      if error_count >= max_retries:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} Đã gặp lỗi quá 10 lần, khởi chạy hàm RUN_TAPSWAP()")
        RUN_TAPSWAP()
        break
      COUNTDOWN(10)
  return energy, balance

def LEVEL_UP(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  headers["Content-Length"] = str(len(str(data).replace(" ","")))
  while True:
    try:
      if proxies:
        response = requests.post("https://api.tapswap.ai/api/player/upgrade", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.tapswap.ai/api/player/upgrade", headers=headers, json=data, timeout=30)
      response.raise_for_status()
      getdata = response.json()["player"]
      balance = getdata["shares"]
      typeUpgrade = data["type"]
      level = getdata[f"{typeUpgrade}_level"]
      headers.pop("Content-Length")
      break
    except requests.exceptions.RequestException as e:
      error_count += 1
      print(f"{đỏ}Hàm LEVEL_UP, đang xảy ra lỗi. Thử lại lần {vàng}{error_count}{đen}/{vàng}{max_retries}{đỏ}. Lỗi: {str(e)}")
      if error_count >= max_retries:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} Đã gặp lỗi quá 10 lần, khởi chạy hàm RUN_TAPSWAP()")
        RUN_TAPSWAP()
        break
      COUNTDOWN(10)
    except (ValueError, KeyError) as e:
      error_count += 1
      print(f"{đỏ}Hàm LEVEL_UP, Error: {str(e)}. Thử lại lần {vàng}{error_count}{đen}/{vàng}{max_retries}{đỏ}")
      if error_count >= max_retries:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} Đã gặp lỗi quá 10 lần, khởi chạy hàm RUN_TAPSWAP()")
        RUN_TAPSWAP()
        break
      COUNTDOWN(10)
  return balance, level

def ACTIVE_BOOST(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  headers["Content-Length"] = str(len(str(data).replace(" ","")))
  username = energy = balance  = None
  while True:
    try:
      if proxies:
        response = requests.post("https://api.tapswap.ai/api/player/apply_boost", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api.tapswap.ai/api/player/apply_boost", headers=headers, json=data, timeout=30)
      response.raise_for_status()
      getdata = response.json()["player"]
      countTurbo = getdata["boost"][1]["cnt"]
      countFullEnergy = getdata["boost"][0]["cnt"]
      status_code = response.status_code
      energy = getdata["energy"]
      headers.pop("Content-Length")
      break
    except requests.exceptions.RequestException as e:
      error_count += 1
      print(f"{đỏ}Hàm ACTIVE_BOOST, đang xảy ra lỗi. Thử lại lần {vàng}{error_count}{đen}/{vàng}{max_retries}{đỏ}. Lỗi: {str(e)}")
      if error_count >= max_retries:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} Đã gặp lỗi quá 10 lần, khởi chạy hàm RUN_TAPSWAP()")
        RUN_TAPSWAP()
        break
      COUNTDOWN(10)
    except (ValueError, KeyError) as e:
      error_count += 1
      print(f"{đỏ}Hàm ACTIVE_BOOST, Error: {str(e)}. Thử lại lần {vàng}{error_count}{đen}/{vàng}{max_retries}{đỏ}")
      if error_count >= max_retries:
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩{trắng} Đã gặp lỗi quá 10 lần, khởi chạy hàm RUN_TAPSWAP()")
        RUN_TAPSWAP()
        break
      COUNTDOWN(10)
  return countTurbo, countFullEnergy, status_code, energy

def RUN_TAPSWAP():
  stt = 0
  with open('config/tapswap.json', 'r', encoding='utf-8') as file:
    config_data = json.loads(remove_comments(file.read()))
  users = config_data
  if len(users) > 10:
    print("Bạn chỉ được phép thêm tối đa 10 tài khoản để chạy tool")
    exit()
  for user in users:
    account = user["STT_ACCOUNT"]
    data = user["DATA"]
    if data == "":
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}Tài khoản {vàng}{account.split('_')[1]} {đỏ}DATA đang bị trống")
      continue
    with open('config/setting.json', 'r', encoding='utf-8') as file:
      config_acc = json.loads(remove_comments(file.read()))[account]
    data = user["data_tapswap"][0]
    content_id = user["data_tapswap"][1]
    timestamp = user["data_tapswap"][2]
    cache_id = user["data_tapswap"][3]
    proxy_list = config_acc["proxy"]
    type_proxy = config_acc["type_proxy"]
    user_agent = config_acc["user-agent"]
    if proxy_list != "":
      proxy_list = proxy_list.split(":")
      proxy = f"{type_proxy}://{proxy_list[2]}:{proxy_list[3]}@{proxy_list[0]}:{proxy_list[1]}"
      proxies = {
      'http': proxy,
      'https': proxy,}
    else:
      if account.split('_')[1] != "1":
        print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}Chuyển tài khoản do không có proxy")
        continue
      proxies = ""
    ip, fakeip = getIP(proxies)
    if ip == fakeip == None:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}\nĐỔI TÀI KHOẢN DO KHÔNG LẤY ĐƯỢC IP, HÃY KIỂM TRA LẠI PROXY\n")
      continue
    headers = {
      "Host": "api.tapswap.ai",
      "Connection": "keep-alive",
      "sec-ch-ua": '"Android WebView";v="125", "Chromium";v="125", "Not.A/Brand";v="24"',
      "x-bot": "no",
      "sec-ch-ua-mobile": "?1",
      "User-Agent": user_agent,
      "x-cv": "631",
      "Cache-Id": cache_id,
      "Content-Type": "application/json",
      "x-app": "tapswap_server",
      "sec-ch-ua-platform": '"Android"',
      "Accept": "*/*",
      "Origin": "https://app.tapswap.club",
      "X-Requested-With": "mark.via.gx",
      "Sec-Fetch-Site": "cross-site",
      "Sec-Fetch-Mode": "cors",
      "Sec-Fetch-Dest": "empty",
      "Referer": "https://app.tapswap.club/",
      "Accept-Encoding": "gzip, deflate, br, zstd",
      "Accept-Language": "vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7"
    }
    access_token, username, energy, balance, ligue, dame, energy_level, charge_level, countTurbo, countFullEnergy, conf = LOGIN(headers, data, proxies)
    headers["Authorization"] = f"Bearer {access_token}"
    ligue_name = conf['ligues'][ligue]['title']
    energyMax = energy_level * 500
    print(f"""{đậm}{đen}<<<<<<<<<<<<<<<<{lam}[{vàngBG}{đỏ}THÔNG TIN TÀI KHOẢN TAPSWAP{đenBG}{lam}]{đen}>>>>>>>>>>>>>>>>>\n{đen}〘👤〙{trắng}UserName {đỏ}: {lục}{username} {trắng}({hồng}{account.split('_')[1]}{trắng})\n{đen}〘🪙〙{trắng}Số Dư {đỏ}: {vàng}{balance:,}\n{đen}〘🔢〙{trắng}Level {đỏ}: {lam}{ligue_name} \n{đen}〘📊〙{trắng}Thông số Game{đỏ}: {vàng}+{dame}{đen}/{vàng}click {đỏ}[{lam}{energy}{đen}/{lam}{energyMax}{đỏ}] {vàng}{countTurbo} {countFullEnergy}\n{đen}〘🌏〙{trắng}IP {đỏ}: {nâu}{ip} {lục}»»» {trắng}Fake IP {đỏ}: {lam}{fakeip}\n""")
    start_time = datetime.now()
    print(f"{đỏ}\033[1;33;40mBẮT ĐẦU CHẠY TOOL {thường}{đậm}{đỏ}» {đen}[{vàng}{start_time.strftime('%H:%M:%S')}{đen}]\n")
    TapConfig = {"price":999999999}
    EnergyConfig = {"price":999999999}
    RecoveryConfig = {"price":999999999}
    if dame < len(conf["tap_levels"]):
      TapConfig =conf["tap_levels"][dame]
    if energy_level < len(conf["energy_levels"]):
      EnergyConfig =conf["energy_levels"][energy_level]
    if charge_level < len(conf["charge_levels"]):
      RecoveryConfig =conf["charge_levels"][charge_level]
    def UPGRADE(balance, TapConfig, EnergyConfig, RecoveryConfig):
      while balance > TapConfig["price"] or balance > EnergyConfig["price"] or balance > RecoveryConfig["price"]:
        if RecoveryConfig["price"] <= TapConfig["price"] and RecoveryConfig["price"] <= EnergyConfig["price"]:
          nameUpgrade = "Recharging Speed"
          typeUpgrade = "charge"
          price = RecoveryConfig["price"]
        elif TapConfig["price"] <= RecoveryConfig["price"] and TapConfig["price"] <= EnergyConfig["price"]:
          nameUpgrade = "Multitap"
          typeUpgrade = "tap"
          price = TapConfig["price"]
        else:
          nameUpgrade = "Energy Limit"
          typeUpgrade = "energy"
          price = EnergyConfig["price"]
        if price < 999999999:
          balance, level = LEVEL_UP(headers, {"type":typeUpgrade}, proxies)
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Nâng cấp {hồng}{nameUpgrade} {trắng}({lam}{level}{trắng}) {lục}• {đỏ}-{price} {đen}» {vàng}{balance:,}")
          access_token, username, energy, balance, ligue, dame, energy_level, charge_level, countTurbo, countFullEnergy, conf = LOGIN(headers, data, proxies)
          headers["Authorization"] = f"Bearer {access_token}"
          TapConfig =conf["tap_levels"][dame]
          EnergyConfig =conf["energy_levels"][energy_level]
          RecoveryConfig =conf["charge_levels"][charge_level]
      return balance, TapConfig, EnergyConfig, RecoveryConfig
    """print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}NÂNG CẤP BOOST")
    balance, TapConfig, EnergyConfig, RecoveryConfig = UPGRADE(balance, TapConfig, EnergyConfig, RecoveryConfig)
    print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}KHÔNG ĐỦ TIỀN NÂNG CẤP BOOST")"""
    while True:
      if energy/dame > 10:
        if energy/dame > 100:
          countTap = random.randint(100,int(energy/dame))
        else:
          countTap = int(energy/dame)
        energy, newbalance = SUBMIT_TAPS(headers, content_id, {"taps":countTap,"time": timestamp}, proxies)
        score = newbalance - balance
        balance = newbalance
        now_time = datetime.now().strftime("%H:%M:%S")
        print(f"{đen}╔═{đỏ}[{vàng}{now_time}{đỏ}] {trắng}Đã CLICK {lục}{countTap} {trắng}lần {vàng}+{score} {đỏ}» {vàng}{newbalance:,}")
        print(f"{đen}╚⫸{hồng}Link tool & hướng dẫn tại Telegram{đỏ}: {lục}@AnubisMMO\n")
      else:
        access_token, username, energy, balance, ligue, dame, energy_level, charge_level, countTurbo, countFullEnergy, conf = LOGIN(headers, data, proxies)
        headers["Authorization"] = f"Bearer {access_token}"
        if countFullEnergy > 0:
          countTurbo, countFullEnergy, status_code, energy = ACTIVE_BOOST(headers, {"type":"energy"}, proxies)
          if status_code == 201:
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã kích hoạt Full Energy", end=" ")
            energyMax = energy_level * 500
            print(f"{đỏ}[{lam}{energy}{đen}/{lam}{energyMax}{đỏ}]\n")
          else:
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Đã kích hoạt Full Energy THẤT BẠI\n")
        else:
          if countTurbo > 0:
            for i in range(0,countTurbo):
              countTurbo, countFullEnergy, status_code, energy = ACTIVE_BOOST(headers, {"type":"turbo"}, proxies)
              if status_code == 201:
                now_time = datetime.now().strftime("%H:%M:%S")
                print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã kích hoạt Turbo", end=" ")
                totalScore = 0
                while True:
                  energy, newbalance = SUBMIT_TAPS(headers, content_id, {"taps":499,"time":timestamp}, proxies)
                  score = newbalance - balance
                  totalScore += score
                  balance = newbalance
                  if score < 100:
                    break
                print(f"{vàng}+{totalScore} {đỏ}» {vàng}{newbalance:,}")
                #balance, TapConfig, EnergyConfig, RecoveryConfig = UPGRADE(balance, TapConfig, EnergyConfig, RecoveryConfig)
              else:
                now_time = datetime.now().strftime("%H:%M:%S")
                print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Đã kích hoạt Turbo THẤT BẠI\n")
          print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}HẾT LƯỢT CLICK, HẾT BOOSTERS {đỏ}» {vàng}ĐỔI TÀI KHOẢN")
          break
RUN_TAPSWAP()"