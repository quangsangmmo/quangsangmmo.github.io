api_key = "aW1wb3J0IHJlcXVlc3RzLCB0aW1lCmltcG9ydCBqc29uLCByYW5kb20sIHN0cmluZywgb3MKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWV6b25lLCB0aW1lZGVsdGEKZnJvbSB0ZXJtY29sb3IgaW1wb3J0IGNvbG9yZWQKZnJvbSBmdW5jdGlvbiBpbXBvcnQgKgp2ZXJzaW9uID0gIjMuMC4xIgpuYW1lX3Rvb2wgPSAicXVhY2txdWFjayIKQkFOTkVSKG5hbWVfdG9vbCwgdmVyc2lvbikKcHJpbnQoZiIiIgp7xJHhu4994p+pe3bDoG5nfeKfqXts4bulY33in6kge2xhbX1Dw4FDIENI4buoQyBOxIJORyBD4bumQSBUT09MCnvEkeG7j31be3bDoG5nfSt7xJHhu499XSB7dHLhuq9uZ31BdXRvIMSRaeG7g20gZGFuaCBow6BuZyBuZ8OgeQp7xJHhu499W3t2w6BuZ30re8SR4buPfV0ge3Ry4bqvbmd9QXV0byBuaOG6t3QgdHLhu6luZyBi4bqxbmcgVG9vbCBob+G6t2MgQ0ZPCnvEkeG7j31be3bDoG5nfSt7xJHhu499XSB7dHLhuq9uZ31BdXRvIHhvw6EgduG7i3QgKG7hur91IGZ1bGwpLCBt4bufIHRy4bupbmcgKG7hur91IHRy4bupbmcgbGV2ZWwgY2FvKQp7xJHhu499W3t2w6BuZ30re8SR4buPfV0ge3Ry4bqvbmd9QXV0byBtdWEgQ0ZPIChu4bq/dSDEkeG7pyB0aeG7gW4pCnvEkeG7j31be3bDoG5nfSt7xJHhu499XSB7dHLhuq9uZ31BdXRvIMSRw6FuaCB24buLdCBHb2xkZW4KIiIiKQoKZGVmIE5FU1RfTElTVChoZWFkZXJzLCBwcm94aWVzPU5vbmUpOgogIGVycm9yX2NvdW50ID0gMAogIG1heF9yZXRyaWVzID0gMTAKICB3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICBpZiBwcm94aWVzOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL25lc3QvbGlzdCIsIGhlYWRlcnM9aGVhZGVycywgcHJveGllcz1wcm94aWVzLCB0aW1lb3V0PTMwKQogICAgICBlbHNlOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL25lc3QvbGlzdCIsIGhlYWRlcnM9aGVhZGVycywgdGltZW91dD0zMCkKICAgICAgcmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpCiAgICAgIGRhdGEgPSByZXNwb25zZS5qc29uKCkKICAgICAgaWYgImRhdGEiIGluIGRhdGE6CiAgICAgICAgaWYgIm5lc3QiIGluIGRhdGFbImRhdGEiXToKICAgICAgICAgIGNvdW50X05FU1QgPSBsZW4oZGF0YVsiZGF0YSJdWyJuZXN0Il0pCiAgICAgICAgaWYgImR1Y2siIGluIGRhdGFbImRhdGEiXToKICAgICAgICAgIGNvdW50X0RVQ0sgPSBsZW4oZGF0YVsiZGF0YSJdWyJkdWNrIl0pCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiBjb3VudF9ORVNULCBjb3VudF9EVUNLCmRlZiBUQVNLX0lORk8oaGVhZGVycywgcHJveGllcz1Ob25lKToKICBlcnJvcl9jb3VudCA9IDAKICBtYXhfcmV0cmllcyA9IDEwCiAgCiAgd2hpbGUgVHJ1ZToKICAgIHRyeToKICAgICAgaWYgcHJveGllczoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy90YXNrL3Rhc2staW5mbyIsIGhlYWRlcnM9aGVhZGVycywgcHJveGllcz1wcm94aWVzLCB0aW1lb3V0PTMwKQogICAgICBlbHNlOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL3Rhc2svdGFzay1pbmZvIiwgaGVhZGVycz1oZWFkZXJzLCB0aW1lb3V0PTMwKQogICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkKICAgICAgZGF0YSA9IHJlc3BvbnNlLmpzb24oKQogICAgICBsaXN0VGFzayA9IGRhdGFbImRhdGEiXQogICAgICBicmVhawogICAgZXhjZXB0OgogICAgICBlcnJvcl9jb3VudCA9IGhhbmRsZUVycm9ycyhlcnJvcl9jb3VudCwgbWF4X3JldHJpZXMpCiAgICBpZiBlcnJvcl9jb3VudCA+PSBtYXhfcmV0cmllczoKICAgICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgiJUg6JU06JVMiKQogICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge3Ry4bqvbmd9xJDDoyBn4bq3cCBs4buXaSBxdcOhIDEwIGzhuqduLCBraOG7n2kgY2jhuqF5IGzhuqFpIHRvb2wgUVVBQ0tRVUFDSyIpCiAgICAgIFJVTl9RVUFDS1FVQUNLKCkKICAgICAgYnJlYWsKICAgIENPVU5URE9XTigxMCkKICByZXR1cm4gbGlzdFRhc2sKZGVmIFRBU0tfQ0hFQ0soaGVhZGVycywgZGF0YSwgcHJveGllcz1Ob25lKToKICBlcnJvcl9jb3VudCA9IDAKICBtYXhfcmV0cmllcyA9IDEwCiAgd2hpbGUgVHJ1ZToKICAgIHRyeToKICAgICAgaWYgcHJveGllczoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvdGFzay9jaGVjayIsIGhlYWRlcnM9aGVhZGVycywganNvbj1kYXRhLCBwcm94aWVzPXByb3hpZXMsIHRpbWVvdXQ9MzApCiAgICAgIGVsc2U6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL3Rhc2svY2hlY2siLCBoZWFkZXJzPWhlYWRlcnMsIGpzb249ZGF0YSkKICAgICAgcmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpCiAgICAgIGdldGRhdGEgPSByZXNwb25zZS5qc29uKCkKICAgICAgc3RhdHVzX3Rhc2sgPSBnZXRkYXRhWyJlcnJvcl9jb2RlIl0KICAgICAgYnJlYWsKICAgIGV4Y2VwdDoKICAgICAgZXJyb3JfY291bnQgPSBoYW5kbGVFcnJvcnMoZXJyb3JfY291bnQsIG1heF9yZXRyaWVzKQogICAgaWYgZXJyb3JfY291bnQgPj0gbWF4X3JldHJpZXM6CiAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfcSQw6MgZ+G6t3AgbOG7l2kgcXXDoSAxMCBs4bqnbiwga2jhu59pIGNo4bqheSBs4bqhaSB0b29sIFFVQUNLUVVBQ0siKQogICAgICBSVU5fUVVBQ0tRVUFDSygpCiAgICAgIGJyZWFrCiAgICBDT1VOVERPV04oMTApCiAgcmV0dXJuIHN0YXR1c190YXNrCmRlZiBHRVRfQkFMQU5DRShoZWFkZXJzLCBwcm94aWVzPU5vbmUpOgogIGVycm9yX2NvdW50ID0gMAogIG1heF9yZXRyaWVzID0gMTAKICB3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICBpZiBwcm94aWVzOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL2JhbGFuY2UvZ2V0IiwgaGVhZGVycz1oZWFkZXJzLCBwcm94aWVzPXByb3hpZXMsIHRpbWVvdXQ9MzApCiAgICAgIGVsc2U6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvYmFsYW5jZS9nZXQiLCBoZWFkZXJzPWhlYWRlcnMsIHRpbWVvdXQ9MzApCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpCiAgICAgIGlmICJkYXRhIiBpbiBkYXRhIGFuZCAiZGF0YSIgaW4gZGF0YVsiZGF0YSJdOgogICAgICAgIGNvdW50X1RPTiA9IGRhdGFbImRhdGEiXVsiZGF0YSJdWzBdWyJiYWxhbmNlIl0KICAgICAgICBjb3VudF9QRVQgPSBkYXRhWyJkYXRhIl1bImRhdGEiXVsxXVsiYmFsYW5jZSJdCiAgICAgICAgY291bnRfRUdHID0gZGF0YVsiZGF0YSJdWyJkYXRhIl1bMl1bImJhbGFuY2UiXQogICAgICAgIGNvdW50X1RSVSA9IGRhdGFbImRhdGEiXVsiZGF0YSJdWzNdWyJiYWxhbmNlIl0KICAgICAgYnJlYWsKICAgIGV4Y2VwdDoKICAgICAgZXJyb3JfY291bnQgPSBoYW5kbGVFcnJvcnMoZXJyb3JfY291bnQsIG1heF9yZXRyaWVzKQogICAgaWYgZXJyb3JfY291bnQgPj0gbWF4X3JldHJpZXM6CiAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfcSQw6MgZ+G6t3AgbOG7l2kgcXXDoSAxMCBs4bqnbiwga2jhu59pIGNo4bqheSBs4bqhaSB0b29sIFFVQUNLUVVBQ0siKQogICAgICBSVU5fUVVBQ0tRVUFDSygpCiAgICAgIGJyZWFrCiAgICBDT1VOVERPV04oMTApCiAgcmV0dXJuIGNvdW50X1RPTiwgY291bnRfUEVULCBjb3VudF9FR0csIGNvdW50X1RSVQpkZWYgSEFSVkVTVEVSX0lORk8oaGVhZGVycywgcHJveGllcz1Ob25lKToKICBlcnJvcl9jb3VudCA9IDAKICBtYXhfcmV0cmllcyA9IDEwCiAgd2hpbGUgVHJ1ZToKICAgIHRyeToKICAgICAgaWYgcHJveGllczoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9uZXN0L2hhcnZlc3Rlci1pbmZvIiwgaGVhZGVycz1oZWFkZXJzLCBwcm94aWVzPXByb3hpZXMsIHRpbWVvdXQ9MzApCiAgICAgIGVsc2U6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvbmVzdC9oYXJ2ZXN0ZXItaW5mbyIsIGhlYWRlcnM9aGVhZGVycywgdGltZW91dD0zMCkKICAgICAgcmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpCiAgICAgIGRhdGEgPSByZXNwb25zZS5qc29uKCkKICAgICAgaGFydmVzdGVyX2lkID0gZGF0YVsiZGF0YSJdLmdldCgiaGFydmVzdGVyX2lkIiwgIktow7RuZyIpCiAgICAgIGlzX2FjdGl2ZSA9IGRhdGFbImRhdGEiXS5nZXQoImlzX2FjdGl2ZSIsICJLaMO0bmcgaG/huqF0IMSR4buZbmciKQogICAgICBicmVhawogICAgZXhjZXB0OgogICAgICBlcnJvcl9jb3VudCA9IGhhbmRsZUVycm9ycyhlcnJvcl9jb3VudCwgbWF4X3JldHJpZXMpCiAgICBpZiBlcnJvcl9jb3VudCA+PSBtYXhfcmV0cmllczoKICAgICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgiJUg6JU06JVMiKQogICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge3Ry4bqvbmd9xJDDoyBn4bq3cCBs4buXaSBxdcOhIDEwIGzhuqduLCBraOG7n2kgY2jhuqF5IGzhuqFpIHRvb2wgUVVBQ0tRVUFDSyIpCiAgICAgIFJVTl9RVUFDS1FVQUNLKCkKICAgICAgYnJlYWsKICAgIENPVU5URE9XTigxMCkKICByZXR1cm4gaGFydmVzdGVyX2lkLCBpc19hY3RpdmUKZGVmIFNFVFRJTkcoaGVhZGVycywgcHJveGllcz1Ob25lKToKICBlcnJvcl9jb3VudCA9IDAKICBtYXhfcmV0cmllcyA9IDEwCiAgd2hpbGUgVHJ1ZToKICAgIHRyeToKICAgICAgaWYgcHJveGllczoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9jb21tb24vc2V0dGluZyIsIGhlYWRlcnM9aGVhZGVycywgcHJveGllcz1wcm94aWVzLCB0aW1lb3V0PTMwKQogICAgICBlbHNlOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL2NvbW1vbi9zZXR0aW5nIiwgaGVhZGVycz1oZWFkZXJzLCB0aW1lb3V0PTMwKQogICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkKICAgICAgZGF0YSA9IHJlc3BvbnNlLmpzb24oKQogICAgICBtdXNpYyA9IGRhdGFbImRhdGEiXS5nZXQoIm11c2ljIikKICAgICAgZWZmZWN0ID0gZGF0YVsiZGF0YSJdLmdldCgiZWZmZWN0IikKICAgICAgZmF2b3VyaXRlID0gZGF0YVsiZGF0YSJdLmdldCgiZmF2b3VyaXRlIikKICAgICAgdXNlcm5hbWUgPSBkYXRhWyJkYXRhIl0uZ2V0KCJ1c2VybmFtZSIpCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiBtdXNpYywgZWZmZWN0LCBmYXZvdXJpdGUsIHVzZXJuYW1lCmRlZiBNQVhfRFVDSyhoZWFkZXJzLCBwcm94aWVzPU5vbmUpOgogIGVycm9yX2NvdW50ID0gMAogIG1heF9yZXRyaWVzID0gMTAKICB3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICBpZiBwcm94aWVzOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL25lc3QvbWF4LWR1Y2siLCBoZWFkZXJzPWhlYWRlcnMsIHByb3hpZXM9cHJveGllcywgdGltZW91dD0zMCkKICAgICAgZWxzZToKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9uZXN0L21heC1kdWNrIiwgaGVhZGVycz1oZWFkZXJzLCB0aW1lb3V0PTMwKQogICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkKICAgICAgZGF0YSA9IHJlc3BvbnNlLmpzb24oKQogICAgICBtYXhfZHVjayA9IGRhdGFbImRhdGEiXS5nZXQoIm1heF9kdWNrIikKICAgICAgYnJlYWsKICAgIGV4Y2VwdDoKICAgICAgZXJyb3JfY291bnQgPSBoYW5kbGVFcnJvcnMoZXJyb3JfY291bnQsIG1heF9yZXRyaWVzKQogICAgaWYgZXJyb3JfY291bnQgPj0gbWF4X3JldHJpZXM6CiAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfcSQw6MgZ+G6t3AgbOG7l2kgcXXDoSAxMCBs4bqnbiwga2jhu59pIGNo4bqheSBs4bqhaSB0b29sIFFVQUNLUVVBQ0siKQogICAgICBSVU5fUVVBQ0tRVUFDSygpCiAgICAgIGJyZWFrCiAgICBDT1VOVERPV04oMTApCiAgcmV0dXJuIG1heF9kdWNrCmRlZiBMSVNUX1JFTE9BRChoZWFkZXJzLCBwcm94aWVzPU5vbmUpOgogIGVycm9yX2NvdW50ID0gMAogIG1heF9yZXRyaWVzID0gMTAKICB3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICBpZiBwcm94aWVzOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL25lc3QvbGlzdC1yZWxvYWQiLCBoZWFkZXJzPWhlYWRlcnMsIHByb3hpZXM9cHJveGllcywgdGltZW91dD0zMCkKICAgICAgZWxzZToKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9uZXN0L2xpc3QtcmVsb2FkIiwgaGVhZGVycz1oZWFkZXJzLCB0aW1lb3V0PTMwKQogICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkKICAgICAgZGF0YSA9IHJlc3BvbnNlLmpzb24oKQogICAgICBsaXN0X25lc3QgPSBkYXRhWyJkYXRhIl0uZ2V0KCJuZXN0IikKICAgICAgbGlzdF9kdWNrID0gZGF0YVsiZGF0YSJdLmdldCgiZHVjayIpCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiBsaXN0X25lc3QsIGxpc3RfZHVjawpkZWYgUFJJQ0VfR09MREVOX0RVQ0soaGVhZGVycywgcHJveGllcz1Ob25lKToKICBlcnJvcl9jb3VudCA9IDAKICBtYXhfcmV0cmllcyA9IDEwCiAgd2hpbGUgVHJ1ZToKICAgIHRyeToKICAgICAgaWYgcHJveGllczoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9kdWNrL3ByaWNlLWdvbGRlbi1kdWNrIiwgaGVhZGVycz1oZWFkZXJzLCBwcm94aWVzPXByb3hpZXMsIHRpbWVvdXQ9MzApCiAgICAgIGVsc2U6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvZHVjay9wcmljZS1nb2xkZW4tZHVjayIsIGhlYWRlcnM9aGVhZGVycywgdGltZW91dD0zMCkKICAgICAgcmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpCiAgICAgIGRhdGEgPSByZXNwb25zZS5qc29uKCkKICAgICAgZXJyb3JfY29kZSA9IGRhdGEuZ2V0KCJlcnJvcl9jb2RlIikKICAgICAgcHJpY2VfZ29sZGVuX2R1Y2sgPSBkYXRhLmdldCgiZGF0YSIpCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiBlcnJvcl9jb2RlLCBwcmljZV9nb2xkZW5fZHVjawpkZWYgR09MREVOX0RVQ0tfSU5GTyhoZWFkZXJzLCBwcm94aWVzPU5vbmUpOgogIGVycm9yX2NvdW50ID0gMAogIG1heF9yZXRyaWVzID0gMTAKICB3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICBpZiBwcm94aWVzOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL2dvbGRlbi1kdWNrL2luZm8iLCBoZWFkZXJzPWhlYWRlcnMsIHByb3hpZXM9cHJveGllcywgdGltZW91dD0zMCkKICAgICAgZWxzZToKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9nb2xkZW4tZHVjay9pbmZvIiwgaGVhZGVycz1oZWFkZXJzLCB0aW1lb3V0PTMwKQogICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkKICAgICAgZGF0YSA9IHJlc3BvbnNlLmpzb24oKQogICAgICBzdGF0dXMgPSBkYXRhWyJkYXRhIl0uZ2V0KCJzdGF0dXMiKQogICAgICB0aW1lX3RvX2dvbGRlbl9kdWNrID0gZGF0YVsiZGF0YSJdLmdldCgidGltZV90b19nb2xkZW5fZHVjayIpCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiBzdGF0dXMsIHRpbWVfdG9fZ29sZGVuX2R1Y2sKZGVmIEdPTERFTl9EVUNLX1JFV0FSRChoZWFkZXJzLCBwcm94aWVzPU5vbmUpOgogIGVycm9yX2NvdW50ID0gMAogIG1heF9yZXRyaWVzID0gMTAKICB3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICBpZiBwcm94aWVzOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL2dvbGRlbi1kdWNrL3Jld2FyZCIsIGhlYWRlcnM9aGVhZGVycywgcHJveGllcz1wcm94aWVzLCB0aW1lb3V0PTMwKQogICAgICBlbHNlOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL2dvbGRlbi1kdWNrL3Jld2FyZCIsIGhlYWRlcnM9aGVhZGVycywgdGltZW91dD0zMCkKICAgICAgcmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpCiAgICAgIGRhdGEgPSByZXNwb25zZS5qc29uKCkKICAgICAgdHlwZV9yZXdhcmQgPSBkYXRhWyJkYXRhIl0uZ2V0KCJ0eXBlIikKICAgICAgYW1vdW50X3Jld2FyZCA9IGRhdGFbImRhdGEiXS5nZXQoImFtb3VudCIpCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiB0eXBlX3Jld2FyZCwgYW1vdW50X3Jld2FyZApkZWYgR09MREVOX0RVQ0tfQ0xBSU0oaGVhZGVycywgcHJveGllcz1Ob25lKToKICBlcnJvcl9jb3VudCA9IDAKICBtYXhfcmV0cmllcyA9IDEwCiAgd2hpbGUgVHJ1ZToKICAgIHRyeToKICAgICAgaWYgcHJveGllczoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvZ29sZGVuLWR1Y2svY2xhaW0iLCBoZWFkZXJzPWhlYWRlcnMsIGpzb249eyd0eXBlJzogMX0sIHByb3hpZXM9cHJveGllcywgdGltZW91dD0zMCkKICAgICAgZWxzZToKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvZ29sZGVuLWR1Y2svY2xhaW0iLCBoZWFkZXJzPWhlYWRlcnMsIGpzb249eyd0eXBlJzogMX0pCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpCiAgICAgIGVycm9yX2NvZGUgPSBkYXRhLmdldCgiZXJyb3JfY29kZSIpCiAgICAgIGRhdGFfY2xhaW0gPSBkYXRhLmdldCgiZGF0YSIpCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiBlcnJvcl9jb2RlLCBkYXRhX2NsYWltCmRlZiBDT0xMRUNUKGhlYWRlcnMsIGlkX25lc3QsIHByb3hpZXM9Tm9uZSk6CiAgZXJyb3JfY291bnQgPSAwCiAgbWF4X3JldHJpZXMgPSAxMAogIHdoaWxlIFRydWU6CiAgICB0cnk6CiAgICAgIGlmIHByb3hpZXM6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL25lc3QvY29sbGVjdCIsIGhlYWRlcnM9aGVhZGVycywganNvbj17J25lc3RfaWQnOiBpZF9uZXN0fSwgcHJveGllcz1wcm94aWVzLCB0aW1lb3V0PTMwKQogICAgICBlbHNlOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9uZXN0L2NvbGxlY3QiLCBoZWFkZXJzPWhlYWRlcnMsIGpzb249eyduZXN0X2lkJzogaWRfbmVzdH0pCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpCiAgICAgIGVycm9yX2NvZGUgPSBkYXRhLmdldCgiZXJyb3JfY29kZSIpCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiBlcnJvcl9jb2RlCmRlZiBIQVRDSChoZWFkZXJzLCBpZF9uZXN0LCBwcm94aWVzPU5vbmUpOgogIGVycm9yX2NvdW50ID0gMAogIG1heF9yZXRyaWVzID0gMTAKICB3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICBpZiBwcm94aWVzOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9uZXN0L2hhdGNoIiwgaGVhZGVycz1oZWFkZXJzLCBqc29uPXsnbmVzdF9pZCc6IGlkX25lc3R9LCBwcm94aWVzPXByb3hpZXMsIHRpbWVvdXQ9MzApCiAgICAgIGVsc2U6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL25lc3QvaGF0Y2giLCBoZWFkZXJzPWhlYWRlcnMsIGpzb249eyduZXN0X2lkJzogaWRfbmVzdH0pCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpCiAgICAgIGVycm9yX2NvZGUgPSBkYXRhLmdldCgiZXJyb3JfY29kZSIpCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiBlcnJvcl9jb2RlCmRlZiBDT0xMRUNUX0RVQ0soaGVhZGVycywgaWRfbmVzdCwgcHJveGllcz1Ob25lKToKICBlcnJvcl9jb3VudCA9IDAKICBtYXhfcmV0cmllcyA9IDEwCiAgd2hpbGUgVHJ1ZToKICAgIHRyeToKICAgICAgaWYgcHJveGllczoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvbmVzdC9jb2xsZWN0LWR1Y2siLCBoZWFkZXJzPWhlYWRlcnMsIGpzb249eyduZXN0X2lkJzogaWRfbmVzdH0sIHByb3hpZXM9cHJveGllcywgdGltZW91dD0zMCkKICAgICAgZWxzZToKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvbmVzdC9jb2xsZWN0LWR1Y2siLCBoZWFkZXJzPWhlYWRlcnMsIGpzb249eyduZXN0X2lkJzogaWRfbmVzdH0pCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpCiAgICAgIGVycm9yX2NvZGUgPSBkYXRhLmdldCgiZXJyb3JfY29kZSIpCiAgICAgIGR1Y2tfaWQgPSBkYXRhWyJkYXRhIl0uZ2V0KCJkdWNrX2lkIikKICAgICAgdG90YWxfcmFyZSA9IGRhdGFbImRhdGEiXS5nZXQoInRvdGFsX3JhcmUiKQogICAgICBicmVhawogICAgZXhjZXB0OgogICAgICBlcnJvcl9jb3VudCA9IGhhbmRsZUVycm9ycyhlcnJvcl9jb3VudCwgbWF4X3JldHJpZXMpCiAgICBpZiBlcnJvcl9jb3VudCA+PSBtYXhfcmV0cmllczoKICAgICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgiJUg6JU06JVMiKQogICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge3Ry4bqvbmd9xJDDoyBn4bq3cCBs4buXaSBxdcOhIDEwIGzhuqduLCBraOG7n2kgY2jhuqF5IGzhuqFpIHRvb2wgUVVBQ0tRVUFDSyIpCiAgICAgIFJVTl9RVUFDS1FVQUNLKCkKICAgICAgYnJlYWsKICAgIENPVU5URE9XTigxMCkKICByZXR1cm4gZXJyb3JfY29kZSwgZHVja19pZCwgdG90YWxfcmFyZQpkZWYgTEFZX05FU1QoaGVhZGVycywgaWRfbmVzdCwgZHVja19pZCwgcHJveGllcz1Ob25lKToKICBlcnJvcl9jb3VudCA9IDAKICBtYXhfcmV0cmllcyA9IDEwCiAgd2hpbGUgVHJ1ZToKICAgIHRyeToKICAgICAgaWYgcHJveGllczoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvbmVzdC9sYXktZWdnIiwgaGVhZGVycz1oZWFkZXJzLCBqc29uPXsnbmVzdF9pZCc6IGlkX25lc3QsICdkdWNrX2lkJzogZHVja19pZH0sIHByb3hpZXM9cHJveGllcywgdGltZW91dD0zMCkKICAgICAgZWxzZToKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvbmVzdC9sYXktZWdnIiwgaGVhZGVycz1oZWFkZXJzLCBqc29uPXsnbmVzdF9pZCc6IGlkX25lc3QsICdkdWNrX2lkJzogZHVja19pZH0pCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpCiAgICAgIGVycm9yX2NvZGUgPSBkYXRhLmdldCgiZXJyb3JfY29kZSIpCiAgICAgIHRvdGFsX3JhcmUgPSBkYXRhWyJkYXRhIl0uZ2V0KCJ0b3RhbF9yYXJlIikKICAgICAgYnJlYWsKICAgIGV4Y2VwdDoKICAgICAgZXJyb3JfY291bnQgPSBoYW5kbGVFcnJvcnMoZXJyb3JfY291bnQsIG1heF9yZXRyaWVzKQogICAgaWYgZXJyb3JfY291bnQgPj0gbWF4X3JldHJpZXM6CiAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfcSQw6MgZ+G6t3AgbOG7l2kgcXXDoSAxMCBs4bqnbiwga2jhu59pIGNo4bqheSBs4bqhaSB0b29sIFFVQUNLUVVBQ0siKQogICAgICBSVU5fUVVBQ0tRVUFDSygpCiAgICAgIGJyZWFrCiAgICBDT1VOVERPV04oMTApCiAgcmV0dXJuIGVycm9yX2NvZGUsIHRvdGFsX3JhcmUKZGVmIFJFTU9WRShoZWFkZXJzLCBsaXN0X2R1Y2ssIHByb3hpZXM9Tm9uZSk6CiAgZHVja19pZCA9IGxpc3RfZHVja1swXVsiaWQiXQogIHJhcmUgPSBnZXRSYXJlKGxpc3RfZHVjaykKICBmb3IgZHVjayBpbiBsaXN0X2R1Y2s6CiAgICBpZiBkdWNrWyJ0b3RhbF9yYXJlIl0gPCByYXJlOgogICAgICBkdWNrX2lkID0gZHVja1siaWQiXQogIGR1Y2tzX2RhdGEgPSBmJ3t7ImR1Y2tzIjpbe2R1Y2tfaWR9XX19JwogIGpzb25fZGF0YSA9IHsiZHVja3MiOiBkdWNrc19kYXRhfQogIGRhdGEgPSBOb25lCiAgZXJyb3JfY291bnQgPSAwCiAgbWF4X3JldHJpZXMgPSAxMAogIHdoaWxlIFRydWU6CiAgICB0cnk6CiAgICAgIGlmIHByb3hpZXM6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL2R1Y2svcmVtb3ZlIiwgaGVhZGVycz1oZWFkZXJzLCBqc29uPWpzb25fZGF0YSwgcHJveGllcz1wcm94aWVzLCB0aW1lb3V0PTMwKQogICAgICBlbHNlOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9kdWNrL3JlbW92ZSIsIGhlYWRlcnM9aGVhZGVycywganNvbj1qc29uX2RhdGEpCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpLmdldCgiZGF0YSIpCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiBkYXRhLCBkdWNrX2lkCmRlZiBNWV9HVUlMRChoZWFkZXJzLCBwcm94aWVzPU5vbmUpOgogIGVycm9yX2NvdW50ID0gMAogIG1heF9yZXRyaWVzID0gMTAKICB3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICBpZiBwcm94aWVzOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL2d1aWxkL215LWd1aWxkIiwgaGVhZGVycz1oZWFkZXJzLCBwcm94aWVzPXByb3hpZXMsIHRpbWVvdXQ9MzApCiAgICAgIGVsc2U6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvZ3VpbGQvbXktZ3VpbGQiLCBoZWFkZXJzPWhlYWRlcnMsIHRpbWVvdXQ9MzApCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBteUd1aWxkID0gcmVzcG9uc2UuanNvbigpWydkYXRhJ11bIm15X2d1aWxkIl0KICAgICAgYnJlYWsKICAgIGV4Y2VwdDoKICAgICAgZXJyb3JfY291bnQgPSBoYW5kbGVFcnJvcnMoZXJyb3JfY291bnQsIG1heF9yZXRyaWVzKQogICAgaWYgZXJyb3JfY291bnQgPj0gbWF4X3JldHJpZXM6CiAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfcSQw6MgZ+G6t3AgbOG7l2kgcXXDoSAxMCBs4bqnbiwga2jhu59pIGNo4bqheSBs4bqhaSB0b29sIFFVQUNLUVVBQ0siKQogICAgICBSVU5fUVVBQ0tRVUFDSygpCiAgICAgIGJyZWFrCiAgICBDT1VOVERPV04oMTApCiAgcmV0dXJuIG15R3VpbGQKZGVmIEpPSU5fR1VJTEQoaGVhZGVycywgcHJveGllcz1Ob25lKToKICBlcnJvcl9jb3VudCA9IDAKICBtYXhfcmV0cmllcyA9IDEwCiAgd2hpbGUgVHJ1ZToKICAgIHRyeToKICAgICAgaWYgcHJveGllczoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvZ3VpbGQvam9pbiIsIGhlYWRlcnM9aGVhZGVycywganNvbj17Imd1aWxkX2lkIjo4OH0sIHByb3hpZXM9cHJveGllcywgdGltZW91dD0zMCkKICAgICAgZWxzZToKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvZ3VpbGQvam9pbiIsIGhlYWRlcnM9aGVhZGVycywganNvbj17Imd1aWxkX2lkIjo4OH0sIHRpbWVvdXQ9MzApCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBlcnJvcl9jb2RlID0gcmVzcG9uc2UuanNvbigpWyJlcnJvcl9jb2RlIl0KICAgICAgYnJlYWsKICAgIGV4Y2VwdDoKICAgICAgZXJyb3JfY291bnQgPSBoYW5kbGVFcnJvcnMoZXJyb3JfY291bnQsIG1heF9yZXRyaWVzKQogICAgaWYgZXJyb3JfY291bnQgPj0gbWF4X3JldHJpZXM6CiAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfcSQw6MgZ+G6t3AgbOG7l2kgcXXDoSAxMCBs4bqnbiwga2jhu59pIGNo4bqheSBs4bqhaSB0b29sIFFVQUNLUVVBQ0siKQogICAgICBSVU5fUVVBQ0tRVUFDSygpCiAgICAgIGJyZWFrCiAgICBDT1VOVERPV04oMTApCiAgcmV0dXJuIGVycm9yX2NvZGUKZGVmIExFRlRfR1VJTEQoaGVhZGVycywgcHJveGllcz1Ob25lKToKICBlcnJvcl9jb3VudCA9IDAKICBtYXhfcmV0cmllcyA9IDEwCiAgd2hpbGUgVHJ1ZToKICAgIHRyeToKICAgICAgaWYgcHJveGllczoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvZ3VpbGQvbGVmdCIsIGhlYWRlcnM9aGVhZGVycywgcHJveGllcz1wcm94aWVzLCB0aW1lb3V0PTMwKQogICAgICBlbHNlOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9ndWlsZC9sZWZ0IiwgaGVhZGVycz1oZWFkZXJzLCB0aW1lb3V0PTMwKQogICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkKICAgICAgZXJyb3JfY29kZSA9IHJlc3BvbnNlLmpzb24oKVsiZXJyb3JfY29kZSJdCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiBlcnJvcl9jb2RlCmRlZiBET05BVEVfSU5GTyhoZWFkZXJzLCBwcm94aWVzPU5vbmUpOgogIGVycm9yX2NvdW50ID0gMAogIG1heF9yZXRyaWVzID0gMTAKICB3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICBpZiBwcm94aWVzOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL2d1aWxkL2RvbmF0ZS1pbmZvIiwgaGVhZGVycz1oZWFkZXJzLCBwcm94aWVzPXByb3hpZXMsIHRpbWVvdXQ9MzApCiAgICAgIGVsc2U6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvZ3VpbGQvZG9uYXRlLWluZm8iLCBoZWFkZXJzPWhlYWRlcnMsIHRpbWVvdXQ9MzApCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBkb25hdGVkID0gcmVzcG9uc2UuanNvbigpWydkYXRhJ11bImRvbmF0ZWQiXQogICAgICBicmVhawogICAgZXhjZXB0OgogICAgICBlcnJvcl9jb3VudCA9IGhhbmRsZUVycm9ycyhlcnJvcl9jb3VudCwgbWF4X3JldHJpZXMpCiAgICBpZiBlcnJvcl9jb3VudCA+PSBtYXhfcmV0cmllczoKICAgICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgiJUg6JU06JVMiKQogICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge3Ry4bqvbmd9xJDDoyBn4bq3cCBs4buXaSBxdcOhIDEwIGzhuqduLCBraOG7n2kgY2jhuqF5IGzhuqFpIHRvb2wgUVVBQ0tRVUFDSyIpCiAgICAgIFJVTl9RVUFDS1FVQUNLKCkKICAgICAgYnJlYWsKICAgIENPVU5URE9XTigxMCkKICByZXR1cm4gZG9uYXRlZApkZWYgRE9OQVRFKGhlYWRlcnMsIGRhdGEsIHByb3hpZXM9Tm9uZSk6CiAgZXJyb3JfY291bnQgPSAwCiAgbWF4X3JldHJpZXMgPSAxMAogIHdoaWxlIFRydWU6CiAgICB0cnk6CiAgICAgIGlmIHByb3hpZXM6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL2d1aWxkL2RvbmF0ZSIsIGhlYWRlcnM9aGVhZGVycywganNvbj1kYXRhLCBwcm94aWVzPXByb3hpZXMsIHRpbWVvdXQ9MzApCiAgICAgIGVsc2U6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL2d1aWxkL2RvbmF0ZSIsIGhlYWRlcnM9aGVhZGVycywganNvbj1kYXRhLCB0aW1lb3V0PTMwKQogICAgICByZXNwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkKICAgICAgZXJyb3JfY29kZSA9IHJlc3BvbnNlLmpzb24oKVsiZXJyb3JfY29kZSJdCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiBlcnJvcl9jb2RlCmRlZiBBQ1RJVkVfSEFSVkVTVEVSKGhlYWRlcnMsIHByb3hpZXM9Tm9uZSk6CiAgZXJyb3JfY291bnQgPSAwCiAgbWF4X3JldHJpZXMgPSAxMAogIHdoaWxlIFRydWU6CiAgICB0cnk6CiAgICAgIGlmIHByb3hpZXM6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL25lc3QvYWN0aXZlLWhhcnZlc3RlciIsIGhlYWRlcnM9aGVhZGVycywgcHJveGllcz1wcm94aWVzLCB0aW1lb3V0PTMwKQogICAgICBlbHNlOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9uZXN0L2FjdGl2ZS1oYXJ2ZXN0ZXIiLCBoZWFkZXJzPWhlYWRlcnMsIHRpbWVvdXQ9MzApCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpWyJkYXRhIl0KICAgICAgYnJlYWsKICAgIGV4Y2VwdDoKICAgICAgZXJyb3JfY291bnQgPSBoYW5kbGVFcnJvcnMoZXJyb3JfY291bnQsIG1heF9yZXRyaWVzKQogICAgaWYgZXJyb3JfY291bnQgPj0gbWF4X3JldHJpZXM6CiAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfcSQw6MgZ+G6t3AgbOG7l2kgcXXDoSAxMCBs4bqnbiwga2jhu59pIGNo4bqheSBs4bqhaSB0b29sIFFVQUNLUVVBQ0siKQogICAgICBSVU5fUVVBQ0tRVUFDSygpCiAgICAgIGJyZWFrCiAgICBDT1VOVERPV04oMTApCiAgcmV0dXJuIGRhdGEKZGVmIEhBUlZFU1RFUl9DT0xMRUNUKGhlYWRlcnMsIHByb3hpZXM9Tm9uZSk6CiAgZXJyb3JfY291bnQgPSAwCiAgbWF4X3JldHJpZXMgPSAxMAogIHdoaWxlIFRydWU6CiAgICB0cnk6CiAgICAgIGlmIHByb3hpZXM6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL2VnZy9oYXJ2ZXN0ZXItY29sbGVjdCIsIGhlYWRlcnM9aGVhZGVycywgcHJveGllcz1wcm94aWVzLCB0aW1lb3V0PTMwKQogICAgICBlbHNlOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9lZ2cvaGFydmVzdGVyLWNvbGxlY3QiLCBoZWFkZXJzPWhlYWRlcnMsIHRpbWVvdXQ9MzApCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBkYXRhID0gcmVzcG9uc2UuanNvbigpWyJkYXRhIl0KICAgICAgYnJlYWsKICAgIGV4Y2VwdDoKICAgICAgZXJyb3JfY291bnQgPSBoYW5kbGVFcnJvcnMoZXJyb3JfY291bnQsIG1heF9yZXRyaWVzKQogICAgaWYgZXJyb3JfY291bnQgPj0gbWF4X3JldHJpZXM6CiAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfcSQw6MgZ+G6t3AgbOG7l2kgcXXDoSAxMCBs4bqnbiwga2jhu59pIGNo4bqheSBs4bqhaSB0b29sIFFVQUNLUVVBQ0siKQogICAgICBSVU5fUVVBQ0tRVUFDSygpCiAgICAgIGJyZWFrCiAgICBDT1VOVERPV04oMTApCiAgcmV0dXJuIGRhdGEKZGVmIFNIT1AoaGVhZGVycywgdHlwZV9zaG9wLCBwcm94aWVzPU5vbmUpOgogIGVycm9yX2NvdW50ID0gMAogIG1heF9yZXRyaWVzID0gMTAKICB3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICBpZiBwcm94aWVzOgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgiaHR0cHM6Ly9hcGkucXVhY2txdWFjay5nYW1lcy9zaG9wL2xpc3Q/dHlwZT0iK3R5cGVfc2hvcCwgaGVhZGVycz1oZWFkZXJzLCBwcm94aWVzPXByb3hpZXMsIHRpbWVvdXQ9MzApCiAgICAgIGVsc2U6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL3Nob3AvbGlzdD90eXBlPSIrdHlwZV9zaG9wLCBoZWFkZXJzPWhlYWRlcnMsIHRpbWVvdXQ9MzApCiAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQogICAgICBkYXRhU2hvcCA9IHJlc3BvbnNlLmpzb24oKVsiZGF0YSJdCiAgICAgIGJyZWFrCiAgICBleGNlcHQ6CiAgICAgIGVycm9yX2NvdW50ID0gaGFuZGxlRXJyb3JzKGVycm9yX2NvdW50LCBtYXhfcmV0cmllcykKICAgIGlmIGVycm9yX2NvdW50ID49IG1heF9yZXRyaWVzOgogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ33EkMOjIGfhurdwIGzhu5dpIHF1w6EgMTAgbOG6p24sIGto4bufaSBjaOG6oXkgbOG6oWkgdG9vbCBRVUFDS1FVQUNLIikKICAgICAgUlVOX1FVQUNLUVVBQ0soKQogICAgICBicmVhawogICAgQ09VTlRET1dOKDEwKQogIHJldHVybiBkYXRhU2hvcApkZWYgQlVZX0NGTyhoZWFkZXJzLCBwcm94aWVzPU5vbmUpOgogIGVycm9yX2NvdW50ID0gMAogIG1heF9yZXRyaWVzID0gMTAKICBwYXlsb2FkID0geyd0eXBlX2l0ZW0nOjJ9CiAgd2hpbGUgVHJ1ZToKICAgIHRyeToKICAgICAgaWYgcHJveGllczoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoImh0dHBzOi8vYXBpLnF1YWNrcXVhY2suZ2FtZXMvc2hvcC9yZW50LWhhcnZlc3RlciIsIGhlYWRlcnM9aGVhZGVycywgZGF0YT1wYXlsb2FkLCBwcm94aWVzPXByb3hpZXMsIHRpbWVvdXQ9MzApCiAgICAgIGVsc2U6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KCJodHRwczovL2FwaS5xdWFja3F1YWNrLmdhbWVzL3Nob3AvcmVudC1oYXJ2ZXN0ZXIiLCBoZWFkZXJzPWhlYWRlcnMsIGRhdGE9cGF5bG9hZCwgdGltZW91dD0zMCkKICAgICAgcmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpCiAgICAgIGVycm9yX2NvZGUgPSByZXNwb25zZS5qc29uKClbImVycm9yX2NvZGUiXQogICAgICBicmVhawogICAgZXhjZXB0OgogICAgICBlcnJvcl9jb3VudCA9IGhhbmRsZUVycm9ycyhlcnJvcl9jb3VudCwgbWF4X3JldHJpZXMpCiAgICBpZiBlcnJvcl9jb3VudCA+PSBtYXhfcmV0cmllczoKICAgICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgiJUg6JU06JVMiKQogICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge3Ry4bqvbmd9xJDDoyBn4bq3cCBs4buXaSBxdcOhIDEwIGzhuqduLCBraOG7n2kgY2jhuqF5IGzhuqFpIHRvb2wgUVVBQ0tRVUFDSyIpCiAgICAgIFJVTl9RVUFDS1FVQUNLKCkKICAgICAgYnJlYWsKICAgIENPVU5URE9XTigxMCkKICByZXR1cm4gZXJyb3JfY29kZQoKI0zhuqV5IFJhcmUgYsOpIG5o4bqldCDEkeG7gyBs4buNYwpkZWYgZ2V0UmFyZShsaXN0X2R1Y2spOgogIHJhcmUgPSBsaXN0X2R1Y2tbMF1bInRvdGFsX3JhcmUiXQogIGZvciBkdWNrIGluIGxpc3RfZHVjazoKICAgIGlmIGR1Y2tbInRvdGFsX3JhcmUiXSA8IHJhcmU6CiAgICAgIHJhcmUgPSBkdWNrWyJ0b3RhbF9yYXJlIl0KICByZXR1cm4gcmFyZQoKd2hpbGUgVHJ1ZToKICBjaG9uX2FjYyA9IGlucHV0KGYie8SR4buPfeKfqXt2w6BuZ33in6l7bOG7pWN94p+pIHt0cuG6r25nfU5I4bqsUCBTVFQgQUNDIE1V4buQTiBDSOG6oFkge8SRZW59OiB7bGFtfSIpCiAgdHJ5OgogICAgY2hvbl9hY2MgPSBpbnQoY2hvbl9hY2MpCiAgICBicmVhawogIGV4Y2VwdDoKICAgIHByaW50KGYie8SR4buPfeKfqXt2w6BuZ33in6l7bOG7pWN94p+pIHvEkeG7j31OSOG6rFAgU1RUIEzDgCBT4buQIikKY291bnRfY29sbGVjdCA9IDAKZGVmIFJVTl9RVUFDS1FVQUNLKCk6CiAgc3R0ID0gMAogIHdpdGggb3BlbignY29uZmlnL3F1YWNrcXVhY2suanNvbicsICdyJywgZW5jb2Rpbmc9J3V0Zi04JykgYXMgZmlsZToKICAgIGNvbmZpZ19kYXRhID0ganNvbi5sb2FkcyhyZW1vdmVfY29tbWVudHMoZmlsZS5yZWFkKCkpKQogIHVzZXJzID0gY29uZmlnX2RhdGEKICBpZiBsZW4odXNlcnMpID4gMTA6CiAgICBwcmludCgiQuG6oW4gY2jhu4kgxJHGsOG7o2MgcGjDqXAgdGjDqm0gdOG7kWkgxJFhIDEwIHTDoGkga2hv4bqjbiDEkeG7gyBjaOG6oXkgdG9vbCIpCiAgICBleGl0KCkKICB1c2VyID0gdXNlcnNbY2hvbl9hY2MtMV0KICBhY2NvdW50ID0gdXNlclsiU1RUX0FDQ09VTlQiXQogIGF1dGhvcml6YXRpb24gPSB1c2VyWyJBVVRIT1JJWkFUSU9OIl0KICBpZiBhdXRob3JpemF0aW9uID09ICIiIG9yIGF1dGhvcml6YXRpb24gPT0gInRoYXlfdGjhur9fYuG6sW5nX2F1dGhvcml6YXRpb24iOgogICAgcHJpbnQoZiJ7xJHhu4994p+pe3bDoG5nfeKfqXts4bulY33in6kge8SR4buPfVTDoGkga2hv4bqjbiB7dsOgbmd9e2FjY291bnQuc3BsaXQoJ18nKVsxXX0ge8SR4buPfURBVEEgxJFhbmcgYuG7iyB0cuG7kW5nIikKICAgIGV4aXQoKQogIHdpdGggb3BlbignY29uZmlnL3NldHRpbmcuanNvbicsICdyJywgZW5jb2Rpbmc9J3V0Zi04JykgYXMgZmlsZToKICAgIGNvbmZpZ19hY2MgPSBqc29uLmxvYWRzKHJlbW92ZV9jb21tZW50cyhmaWxlLnJlYWQoKSkpW2FjY291bnRdCiAgcHJveHlfbGlzdCA9IGNvbmZpZ19hY2NbInByb3h5Il0KICB0eXBlX3Byb3h5ID0gY29uZmlnX2FjY1sidHlwZV9wcm94eSJdCiAgdXNlcl9hZ2VudCA9IGNvbmZpZ19hY2NbInVzZXItYWdlbnQiXQogIGlmIHByb3h5X2xpc3QgIT0gIiI6CiAgICBwcm94eV9saXN0ID0gcHJveHlfbGlzdC5zcGxpdCgiOiIpCiAgICBwcm94eSA9IGYie3R5cGVfcHJveHl9Oi8ve3Byb3h5X2xpc3RbMl19Ontwcm94eV9saXN0WzNdfUB7cHJveHlfbGlzdFswXX06e3Byb3h5X2xpc3RbMV19IgogICAgcHJveGllcyA9IHsKICAgICdodHRwJzogcHJveHksCiAgICAnaHR0cHMnOiBwcm94eSx9CiAgZWxzZToKICAgIGlmIGFjY291bnQuc3BsaXQoJ18nKVsxXSAhPSAiMSI6CiAgICAgIHByaW50KGYie8SR4buPfeKfqXt2w6BuZ33in6l7bOG7pWN94p+pIHt0cuG6r25nfSBDaHV54buDbiB0w6BpIGtob+G6o24gZG8ga2jDtG5nIGPDsyBwcm94eSIpCiAgICAgIGV4aXQoKQogICAgcHJveGllcyA9ICIiCiAgaXAsIGZha2VpcCA9IGdldElQKHByb3hpZXMpCiAgaWYgaXAgPT0gZmFrZWlwID09IE5vbmU6CiAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICBwcmludChmInvEkeG7j33in6l7dsOgbmd94p+pe2zhu6VjfeKfqSB7xJHhu499XG7EkOG7lEkgVMOASSBLSE/huqJOIERPIEtIw5RORyBM4bqkWSDEkMav4buiQyBJUCwgSMODWSBLSeG7gk0gVFJBIEzhuqBJIFBST1hZXG4iKQogICAgUlVOX1FVQUNLUVVBQ0soKQogIGhlYWRlcnMgPSB7CiAgICAnSG9zdCc6J2FwaS5xdWFja3F1YWNrLmdhbWVzJywKICAgICdzZWMtY2gtdWEnOiciQ2hyb21pdW0iO3Y9IjEyNCIsICJBbmRyb2lkIFdlYlZpZXciO3Y9IjEyNCIsICJOb3QtQS5CcmFuZCI7dj0iOTkiJywKICAgICdzZWMtY2gtdWEtbW9iaWxlJzonPzEnLAogICAgJ2F1dGhvcml6YXRpb24nOmF1dGhvcml6YXRpb24sCiAgICAndXNlci1hZ2VudCc6dXNlcl9hZ2VudCwKICAgICdzZWMtY2gtdWEtcGxhdGZvcm0nOiciQW5kcm9pZCInLAogICAgJ2FjY2VwdCc6JyovKicsCiAgICAnb3JpZ2luJzonaHR0cHM6Ly9wbGF5LnF1YWNrcXVhY2suZ2FtZXMvJywKICAgICdzZWMtZmV0Y2gtc2l0ZSc6J2Nyb3NzLXNpdGUnLAogICAgJ3NlYy1mZXRjaC1tb2RlJzonY29ycycsCiAgICAnc2VjLWZldGNoLWRlc3QnOidlbXB0eScsCiAgICAncmVmZXJlcic6J2h0dHBzOi8vcGxheS5xdWFja3F1YWNrLmdhbWVzLycsCiAgICAnYWNjZXB0LWVuY29kaW5nJzonZ3ppcCwgZGVmbGF0ZSwgYnIsIHpzdGQnLAogICAgJ2FjY2VwdC1sYW5ndWFnZSc6J3ZpLVZOLHZpO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43JywKICAgICdwcmlvcml0eSc6J3U9MSwgaSd9CiAgbGlzdFRhc2sgPSBUQVNLX0lORk8oaGVhZGVycywgcHJveGllcykKICBnb2xkZW5fZHVja190aW1lID0gIjAiCiAgaGFydmVzdGVyX2lkLCBpc19hY3RpdmUgPSBIQVJWRVNURVJfSU5GTyhoZWFkZXJzLHByb3hpZXMpCiAgY291bnRfTkVTVCwgY291bnRfRFVDSyA9IE5FU1RfTElTVChoZWFkZXJzLHByb3hpZXMpCiAgbXVzaWMsIGVmZmVjdCwgZmF2b3VyaXRlLCB1c2VybmFtZSA9IFNFVFRJTkcoaGVhZGVycyxwcm94aWVzKQogIGNvdW50X1RPTiwgY291bnRfUEVULCBjb3VudF9FR0csIGNvdW50X1RSVSA9IEdFVF9CQUxBTkNFKGhlYWRlcnMscHJveGllcykKICBteUd1aWxkID0gTVlfR1VJTEQoaGVhZGVycywgcHJveGllcykKICBtYXhfZHVjayA9IE1BWF9EVUNLKGhlYWRlcnMscHJveGllcykKICBwcmludChmIiIie8SRZW59PDw8PDw8PDw8PDw8PDw8PDx7bGFtfVt7dsOgbmdCR317xJHhu499VEjDlE5HIFTDgEkgS0hP4bqiTiBRVUFDS1FVQUNLe8SRZW5CR317bGFtfV17xJFlbn0+Pj4+Pj4+Pj4+Pj4+Pj4+Plxue8SRZW5944CY8J+RpOOAmXt0cuG6r25nfVVzZXJuYW1lIHvEkeG7j306IHt2w6BuZ31Ae3VzZXJuYW1lLnNwbGl0KCcoJylbMV0uc3BsaXQoJyknKVswXX0ge3Ry4bqvbmd9KHto4buTbmd9e2FjY291bnQuc3BsaXQoJ18nKVsxXX17dHLhuq9uZ30pXG57xJFlbn3jgJjwn6qZ44CZe3Ry4bqvbmd9U+G7kSBExrAge8SR4buPfToge2zhu6VjfXtjb3VudF9QRVR9IPCfkLgge8SRZW59fCB7bsOidX17Y291bnRfRUdHfSDwn6WaIHvEkWVufXwge3hhbmh9e2NvdW50X1RPTn0g8J+Sjlxue8SRZW5944CY8J+quuOAmXt0cuG6r25nfVPhu5EgVOG7lSB7xJHhu499OiB7bGFtfXtjb3VudF9ORVNUfSBcbnvEkWVufeOAmPCfpobjgJl7dHLhuq9uZ31T4buRIFbhu4t0IHvEkeG7j306IHt2w6BuZ317Y291bnRfRFVDS30ve21heF9kdWNrfVxue8SRZW5944CY8J+buOOAmXt0cuG6r25nfUNGTyBUaHUgVHLhu6luZyB7xJHhu499OiB7eGFuaH17aXNfYWN0aXZlfVxue8SRZW5944CY8J+Sk+OAmXt0cuG6r25nfVbhu4t0IMSQw6FuaCBE4bqldSB7xJHhu499OiB7aOG7k25nfXtmYXZvdXJpdGV9XG57xJFlbn3jgJjimpnvuI/jgJl7dHLhuq9uZ31TZXR0aW5nIHvEkeG7j306IHtsYW19e211c2ljffCflIoge8SRZW594oCiIHt2w6BuZ317ZWZmZWN0fVxue8SRZW5944CY8J+Mj+OAmXt0cuG6r25nfUlQIHvEkeG7j306IHtuw6J1fXtpcH0ge2zhu6VjfcK7wrvCuyB7dHLhuq9uZ31GYWtlIElQIHvEkeG7j306IHtsYW19e2Zha2VpcH0KICAiIiIpCiAgc3RhcnRfdGltZSA9IGRhdGV0aW1lLm5vdygpCiAgcHJpbnQoZiJ7xJHhu499XDAzM1sxOzMzOzQwbULhuq5UIMSQ4bqmVSBDSOG6oFkgVE9PTCB7dGjGsOG7nW5nfXvEkeG6rW19e8SR4buPfcK7IHvEkWVufVt7dsOgbmd9e3N0YXJ0X3RpbWUuc3RyZnRpbWUoJyVIOiVNOiVTJyl9e8SRZW59XVxuIikKICBmb3IgdGFzayBpbiBsaXN0VGFza1sicGFydG5lcl90YXNrIl06CiAgICBpZiB0YXNrWyJzdGF0dXMiXSA9PSAwOgogICAgICBzdGF0dXNfdGFzayA9IFRBU0tfQ0hFQ0soaGVhZGVycywgeyJ0YXNrX2lkIjp0YXNrWyJpZCJdfSwgcHJveGllcykKICAgICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgiJUg6JU06JVMiKQogICAgICBpZiBzdGF0dXNfdGFzayA9PSAiIjoKICAgICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge3Ry4bqvbmd9SG/DoG4gdGjDoG5oIHtsYW19e3Rhc2tbJ3RpdGxlJ119IHt2w6BuZ30re3Rhc2tbJ3Jld2FyZCddfVBFVCIpCiAgICAgIGVsc2U6CiAgICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHvEkeG7j31Ib8OgbiB0aMOgbmgge2xhbX17dGFza1sndGl0bGUnXX0ge8SR4buPfXRo4bqldCBi4bqhaSIpCiAgICAgIENPVU5URE9XTigxKQogIGZvciB0YXNrIGluIGxpc3RUYXNrWyJub3JtYWxfdGFzayJdOgogICAgaWYgdGFza1sic3RhdHVzIl0gPT0gMDoKICAgICAgc3RhdHVzX3Rhc2sgPSBUQVNLX0NIRUNLKGhlYWRlcnMsIHsidGFza19pZCI6dGFza1siaWQiXX0sIHByb3hpZXMpCiAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgaWYgc3RhdHVzX3Rhc2sgPT0gIiI6CiAgICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfUhvw6BuIHRow6BuaCB7bGFtfXt0YXNrWyd0aXRsZSddfSB7dsOgbmd9K3t0YXNrWydyZXdhcmQnXX1QRVQiKQogICAgICBlbHNlOgogICAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7xJHhu499SG/DoG4gdGjDoG5oIHtsYW19e3Rhc2tbJ3RpdGxlJ119IHvEkeG7j310aOG6pXQgYuG6oWkiKQogIGZvciB0YXNrIGluIGxpc3RUYXNrWyJkYWlseV90YXNrIl06CiAgICBpZiB0YXNrWyJzdGF0dXMiXSA9PSAwIGFuZCB0YXNrWyJpZCJdID09IDU6CiAgICAgIHN0YXR1c190YXNrID0gVEFTS19DSEVDSyhoZWFkZXJzLCB7InRhc2tfaWQiOnRhc2tbImlkIl19LCBwcm94aWVzKQogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIGlmIHN0YXR1c190YXNrID09ICIiOgogICAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7dHLhuq9uZ31Ib8OgbiB0aMOgbmgge2xhbX17dGFza1sndGl0bGUnXX0ge3bDoG5nfSt7dGFza1sncmV3YXJkJ119UEVUIikKICAgICAgZWxzZToKICAgICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge8SR4buPfUhvw6BuIHRow6BuaCB7bGFtfXt0YXNrWyd0aXRsZSddfSB7xJHhu499dGjhuqV0IGLhuqFpIikKICBlcnJvcl9jb2RlLCBwcmljZV9nb2xkZW5fZHVjayA9IFBSSUNFX0dPTERFTl9EVUNLKGhlYWRlcnMscHJveGllcykKICBpZiBteUd1aWxkID09IE5vbmU6CiAgICBlcnJvcl9jb2RlID0gSk9JTl9HVUlMRChoZWFkZXJzLCBwcm94aWVzKQogICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgiJUg6JU06JVMiKQogICAgaWYgZXJyb3JfY29kZSA9PSAiIjoKICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfcSQw6MgdGhhbSBnaWEge2xhbX1HVUlMRCIpCiAgICBlbHNlOgogICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge8SR4buPfVRoYW0gZ2lhIHtsYW19R1VJTEQge8SR4buPfXRo4bqldCBi4bqhaSIpCiAgZWxpZiBteUd1aWxkICE9IE5vbmU6CiAgICBpZiBteUd1aWxkWydndWlsZF9pZCddICE9IDg4IGFuZCBteUd1aWxkWydzdGF0dXMnXSAhPSAxOgogICAgICBlcnJvcl9jb2RlID0gTEVGVF9HVUlMRChoZWFkZXJzLCBwcm94aWVzKQogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIGlmIGVycm9yX2NvZGUgPT0gIiI6CiAgICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfcSQw6MgcuG7nWkga2jhu49pIHtsYW19R1VJTEQiKQogICAgICAgIGVycm9yX2NvZGUgPSBKT0lOX0dVSUxEKGhlYWRlcnMsIHByb3hpZXMpCiAgICAgICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgiJUg6JU06JVMiKQogICAgICAgIGlmIGVycm9yX2NvZGUgPT0gIiI6CiAgICAgICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge3Ry4bqvbmd9xJDDoyB0aGFtIGdpYSB7bGFtfUdVSUxEIikKICAgICAgICBlbHNlOgogICAgICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHvEkeG7j31UaGFtIGdpYSB7bGFtfUdVSUxEIHvEkeG7j310aOG6pXQgYuG6oWkiKQogICAgICBlbHNlOgogICAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7xJHhu499UuG7nWkga2jhu49pIHtsYW19R1VJTEQge8SR4buPfXRo4bqldCBi4bqhaSIpCiAgZG9uYXRlZCA9IERPTkFURV9JTkZPKGhlYWRlcnMsIHByb3hpZXMpCiAgaWYgaW50KGZsb2F0KGRvbmF0ZWQpKSA8PSAxMDAwMDAwIGFuZCBpbnQoZmxvYXQoY291bnRfRUdHKSkgPiAxMDAwMDAwOgogICAgZXJyb3JfY29kZSA9IERPTkFURShoZWFkZXJzLCB7ImFtb3VudCI6c3RyKGludChmbG9hdChjb3VudF9FR0cpKSl9LCBwcm94aWVzKQogICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgiJUg6JU06JVMiKQogICAgaWYgZXJyb3JfY29kZSA9PSAiIjoKICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfcSQw6Mge2xhbX1ET05BVEUge3bDoG5nfXtpbnQoZmxvYXQoY291bnRfRUdHKSk6LH0ge3Ry4bqvbmd9dHLhu6luZyBjaG8gR3VpbGQiKQogICAgICBjb3VudF9UT04sIGNvdW50X1BFVCwgY291bnRfRUdHLCBjb3VudF9UUlUgPSBHRVRfQkFMQU5DRShoZWFkZXJzLHByb3hpZXMpCiAgICBlbHNlOgogICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge8SR4buPfcSQw6Mge2xhbX1ET05BVEUge3bDoG5nfTFNIHvEkeG7j310cuG7qW5nIHRo4bqldCBi4bqhaSIpCiAgaWYgZXJyb3JfY29kZSA9PSAiIiBhbmQgcHJpY2VfZ29sZGVuX2R1Y2sgPT0gMjoKICAgIHN0YXR1cywgdGltZV90b19nb2xkZW5fZHVjayA9IEdPTERFTl9EVUNLX0lORk8oaGVhZGVycyxwcm94aWVzKQogICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKQogICAgZ29sZGVuX2R1Y2tfdGltZSA9IG5vd190aW1lICsgdGltZWRlbHRhKHNlY29uZHM9dGltZV90b19nb2xkZW5fZHVjaykKICAgIG5vd190aW1lID0gbm93X3RpbWUuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgIGdvbGRlbl9kdWNrX3RpbWUgPSBnb2xkZW5fZHVja190aW1lLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICBpZiB0aW1lX3RvX2dvbGRlbl9kdWNrID09IDA6CiAgICAgIHR5cGVfcmV3YXJkLCBhbW91bnRfcmV3YXJkID0gR09MREVOX0RVQ0tfUkVXQVJEKGhlYWRlcnMscHJveGllcykKICAgICAgaWYgdHlwZV9yZXdhcmQgIT0wIGFuZCBhbW91bnRfcmV3YXJkICE9IDA6CiAgICAgICAgaWYgdHlwZV9yZXdhcmQgPT0gMjoKICAgICAgICAgIG5hbWVfcmV3YXJkID0gIlBFVCDwn5C4IgogICAgICAgIGVsaWYgdHlwZV9yZXdhcmQgPT0gMToKICAgICAgICAgIG5hbWVfcmV3YXJkID0gIlRPTiDwn5KOIgogICAgICAgIGVsc2U6CiAgICAgICAgICBuYW1lX3Jld2FyZCA9ICJFR0cg8J+lmiIKICAgICAgICBlcnJvcl9jb2RlLCBkYXRhX2NsYWltID0gR09MREVOX0RVQ0tfQ0xBSU0oaGVhZGVycyxwcm94aWVzKQogICAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgICBpZiBlcnJvcl9jb2RlID09ICIiOgogICAgICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHt0cuG6r25nfULhuqFuIG5o4bqtbiDEkcaw4bujYyB7bOG7pWN9e2Ftb3VudF9yZXdhcmR9IHtsYW19e25hbWVfcmV3YXJkfSB7dHLhuq9uZ3104burIHt2w6BuZ31Hb2xkZW4gRHVja1xuIikKICAgICAgICBlbHNlOgogICAgICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHvEkeG7j31C4bqhbiBLSMOUTkcgbmjhuq1uIMSRxrDhu6NjIHBo4bqnbiB0aMaw4bufbmcgdOG7qyB7dsOgbmd9R29sZGVuIER1Y2siKQogICAgICBzdGF0dXMsIHRpbWVfdG9fZ29sZGVuX2R1Y2sgPSBHT0xERU5fRFVDS19JTkZPKGhlYWRlcnMscHJveGllcykKICAgICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKQogICAgICBnb2xkZW5fZHVja190aW1lID0gbm93X3RpbWUgKyB0aW1lZGVsdGEoc2Vjb25kcz10aW1lX3RvX2dvbGRlbl9kdWNrKQogICAgICBub3dfdGltZSA9IG5vd190aW1lLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIGdvbGRlbl9kdWNrX3RpbWUgPSBnb2xkZW5fZHVja190aW1lLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICBlbHNlOgogICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge3Ry4bqvbmd9R29sZGVuIER1Y2sgc+G6vSB4deG6pXQgaGnhu4duIHNhdSB7dsOgbmd9e3RpbWVfdG9fZ29sZGVuX2R1Y2t9IHt0cuG6r25nfWdpw6J5IikKICBzdGFydEJhbGFuY2UgPSBpbnQoZmxvYXQoY291bnRfRUdHKSkKICBpZiBpbnQoZmxvYXQoY291bnRfUEVUKSkgPj0gMTUwIGFuZCBpc19hY3RpdmUgPT0gTm9uZToKICAgIGVycm9yX2NvZGUgPSBCVVlfQ0ZPKGhlYWRlcnMsIHByb3hpZXMpCiAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICBpZiBlcnJvcl9jb2RlID09ICIiOgogICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge3Ry4bqvbmd9xJDDoyBtdWEge2xhbX1DRk8ge3Ry4bqvbmd9bmjhurd0IHRy4bupbmciKQogICAgICBoYXJ2ZXN0ZXJfaWQsIGlzX2FjdGl2ZSA9IEhBUlZFU1RFUl9JTkZPKGhlYWRlcnMscHJveGllcykKICAgIGVsc2U6CiAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7xJHhu499TXVhIHtsYW19Q0ZPIHvEkeG7j310aOG6pXQgYuG6oWkiKQogIHdoaWxlIFRydWU6CiAgICBpZiBpc19hY3RpdmUgPT0gMToKICAgICAgZGF0YSA9IEhBUlZFU1RFUl9DT0xMRUNUKGhlYWRlcnMsIHByb3hpZXMpCiAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgY291bnRfVE9OLCBjb3VudF9QRVQsIGNvdW50X0VHRywgY291bnRfVFJVID0gR0VUX0JBTEFOQ0UoaGVhZGVycywgcHJveGllcykKICAgICAgYmFsYW5jZSA9IGludChmbG9hdChjb3VudF9FR0cpKQogICAgICB0b3RhbF90aW1lID0gZGF0ZXRpbWUubm93KCkgLSBzdGFydF90aW1lCiAgICAgIHRvdGFsX3RpbWUgPSByb3VuZCh0b3RhbF90aW1lLnRvdGFsX3NlY29uZHMoKSwxKQogICAgICB0cnVuZ19iaW5oID0gcm91bmQoKGJhbGFuY2Utc3RhcnRCYWxhbmNlKS90b3RhbF90aW1lLDEpCiAgICAgIGlmIGRhdGEgPT0gVHJ1ZToKICAgICAgICBwcmludChmInvEkWVufeKVlOKVkHvEkeG7j31be3bDoG5nfXtub3dfdGltZX17xJHhu499XSB7dHLhuq9uZ33EkMOjIHRodSB0cuG7qW5nIHThu6sge2xhbX1DRk8ge2zhu6VjfSt7dHJ1bmdfYmluaH3wn6Wae8SRZW59L3ts4bulY31zIHvEkWVufcK7IHt2w6BuZ317YmFsYW5jZTosfSB7xJFlbn3CuyB7bGFtfSt7KGJhbGFuY2Utc3RhcnRCYWxhbmNlKTosfSIpCiAgICAgIGVsc2U6CiAgICAgICAgcHJpbnQoZiJ7xJFlbn3ilZTilZB7xJHhu499W3t2w6BuZ317c3R0fXvEkeG7j31dIHvEkeG7j31UaHUgdHLhu6luZyB04burIHtsYW19Q0ZPIHvEkeG7j310aOG6pXQgYuG6oWkiKQogICAgICBwcmludChmInvEkWVufeKVmuKruHto4buTbmd9TGluayB0b29sICYgaMaw4bubbmcgZOG6q24gdOG6oWkgVGVsZWdyYW17xJHhu499OiB7bOG7pWN9QEFpcmRyb3BUb29sQ2hhbm5lbFxuIikKICAgICAgQ09VTlRET1dOKDUpCiAgICBlbGlmIGlzX2FjdGl2ZSA9PSAyOgogICAgICBkYXRhID0gQUNUSVZFX0hBUlZFU1RFUihoZWFkZXJzLCBwcm94aWVzKQogICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgIGlmIGRhdGEgPT0gVHJ1ZToKICAgICAgICBwcmludChmInvEkeG7j33in6h7dsOgbmd9e25vd190aW1lfXvEkeG7j33in6kge3Ry4bqvbmd9xJDDoyBrw61jaCBob+G6oXQge2xhbX1DRk8ge3Ry4bqvbmd9bmjhurd0IHRy4bupbmdcbiIpCiAgICAgIGVsc2U6CiAgICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHvEkeG7j33EkMOjIGvDrWNoIGhv4bqhdCB7bGFtfUNGTyB7xJHhu499dGjhuqV0IGLhuqFpXG4iKQogICAgICBoYXJ2ZXN0ZXJfaWQsIGlzX2FjdGl2ZSA9IEhBUlZFU1RFUl9JTkZPKGhlYWRlcnMscHJveGllcykKICAgIGVsaWYgaXNfYWN0aXZlID09IE5vbmU6CiAgICAgIGxpc3RfbmVzdCwgbGlzdF9kdWNrID0gTElTVF9SRUxPQUQoaGVhZGVycyxwcm94aWVzKQogICAgICByYXJlID0gZ2V0UmFyZShsaXN0X2R1Y2spCiAgICAgIGNvdW50X1RPTiwgY291bnRfUEVULCBjb3VudF9FR0csIGNvdW50X1RSVSA9IEdFVF9CQUxBTkNFKGhlYWRlcnMscHJveGllcykKICAgICAgRFVDS19vbGQgPSBsZW4obGlzdF9kdWNrKQogICAgICBUT05fb2xkLCBQRVRfb2xkLCBFR0dfb2xkLCBUUlVfb2xkLCBEVUNLX29sZCA9IGNvdW50X1RPTiwgY291bnRfUEVULCBjb3VudF9FR0csIGNvdW50X1RSVSwgY291bnRfRFVDSwogICAgICBmb3IgbmVzdCBpbiBsaXN0X25lc3Q6CiAgICAgICAgdHlwZV9lZ2cgPSBuZXN0WyJ0eXBlX2VnZyJdCiAgICAgICAgaWRfbmVzdCA9IG5lc3RbImlkIl0KICAgICAgICBpZiB0eXBlX2VnZyAhPSBOb25lOgogICAgICAgICAgaWYgdHlwZV9lZ2cgPD0gcmFyZSBhbmQgbGVuKGxpc3RfZHVjaykgPj0gbWF4X2R1Y2stNToKICAgICAgICAgICAgZXJyb3JfY29kZSA9IENPTExFQ1QoaGVhZGVycyxpZF9uZXN0LHByb3hpZXMpCiAgICAgICAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgICAgICAgbGlzdF9uZXN0LCBsaXN0X2R1Y2sgPSBMSVNUX1JFTE9BRChoZWFkZXJzLHByb3hpZXMpCiAgICAgICAgICAgIERVQ0tfbmV3ID0gbGVuKGxpc3RfZHVjaykKICAgICAgICAgICAgVE9OX25ldywgUEVUX25ldywgRUdHX25ldywgVFJVX25ldyA9IEdFVF9CQUxBTkNFKGhlYWRlcnMscHJveGllcykKICAgICAgICAgICAgYmFsYW5jZSA9IGludChmbG9hdChFR0dfbmV3KSkKICAgICAgICAgICAgdG90YWxfdGltZSA9IGRhdGV0aW1lLm5vdygpIC0gc3RhcnRfdGltZQogICAgICAgICAgICB0b3RhbF90aW1lID0gcm91bmQodG90YWxfdGltZS50b3RhbF9zZWNvbmRzKCksMSkKICAgICAgICAgICAgdHJ1bmdfYmluaCA9IHJvdW5kKChiYWxhbmNlLXN0YXJ0QmFsYW5jZSkvdG90YWxfdGltZSwxKQogICAgICAgICAgICBpZiBlcnJvcl9jb2RlID09ICIiOgogICAgICAgICAgICAgIHByaW50KGYie8SRZW594pWU4pWQe8SR4buPfVt7dsOgbmd9e25vd190aW1lfXvEkeG7j31dIHt0cuG6r25nfeG7lCB7dsOgbmd9e2lkX25lc3R9IHt0cuG6r25nfcSQw4MgVEhVIFRS4buoTkcgQ+G6pFAge2jhu5NuZ317dHlwZV9lZ2d9IHvEkeG7j33CuyIsIGVuZD0iICIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgcHJpbnQoZiJ7xJFlbn3ilZTilZB7xJHhu499W3t2w6BuZ317bm93X3RpbWV9e8SR4buPfV0ge8SR4buPfeG7lCB7dsOgbmd9e2lkX25lc3R9IHvEkeG7j31M4buWSSBUSFUgVFLhu6hORyBD4bqkUCB7aOG7k25nfXt0eXBlX2VnZ30ge8SR4buPfcK7IiwgZW5kPSIgIikKICAgICAgICAgICAgcHJpbnQoZiJ7dsOgbmd9e2JhbGFuY2U6LH1cbnvEkWVufeKVkXto4buTbmd9TGluayB0b29sICYgaMaw4bubbmcgZOG6q24gdOG6oWkgVGVsZWdyYW17xJHhu499OiB7bOG7pWN9QEFpcmRyb3BUb29sQ2hhbm5lbCIpCiAgICAgICAgICAgIGR1Y2tfaWQgPSBsaXN0X2R1Y2tbMF1bImlkIl0KICAgICAgICAgICAgZXJyb3JfY29kZSwgdG90YWxfcmFyZSA9IExBWV9ORVNUKGhlYWRlcnMsaWRfbmVzdCxkdWNrX2lkLHByb3hpZXMpCiAgICAgICAgICAgIG5vd190aW1lID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgICAgICAgaWYgZXJyb3JfY29kZSA9PSAiIjoKICAgICAgICAgICAgICBwcmludChmInvEkWVufeKVmuKruHt0cuG6r25nfVbhu4pUIHtsYW19e2R1Y2tfaWR9IHt0cuG6r25nfcSQw4MgxJDhurogVFLhu6hORyBN4buaSSB7bGFtfVt7aOG7k25nfXtEVUNLX25ld30ve21heF9kdWNrfXtsYW19XSB7bOG7pWN9K3t0cnVuZ19iaW5offCfpZp7xJFlbn0ve2zhu6VjfXMge2xhbX0reyhiYWxhbmNlLXN0YXJ0QmFsYW5jZSk6LH1cbiIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgcHJpbnQoZiJ7xJFlbn3ilZriq7h7xJHhu499VuG7ilQge2xhbX17ZHVja19pZH0ge8SR4buPfUtIw5RORyDEkOG6uiBUUuG7qE5HIE3hu5pJIHtsYW19W3to4buTbmd9e0RVQ0tfbmV3fS97bWF4X2R1Y2t9e2xhbX1dXG4iKQogICAgICAgICAgZWxpZiB0eXBlX2VnZyA+IHJhcmUgb3IgbGVuKGxpc3RfZHVjaykgPCBtYXhfZHVjay01OgogICAgICAgICAgICBpZiBsZW4obGlzdF9kdWNrKSA8IG1heF9kdWNrOgogICAgICAgICAgICAgIHByaW50KGYie8SRZW594pWU4pWQe8SR4buPfVvwn6aGXSB7dHLhuq9uZ33hu5Qge2xhbX17aWRfbmVzdH0ge3Ry4bqvbmd9UEjDgVQgSEnhu4ZOIFRS4buoTkcgQ+G6pFAge2jhu5NuZ317dHlwZV9lZ2d9IikKICAgICAgICAgICAgICBpZiBuZXN0WyJzdGF0dXMiXSA8IDM6CiAgICAgICAgICAgICAgICBlcnJvcl9jb2RlID0gSEFUQ0goaGVhZGVycyxpZF9uZXN0LHByb3hpZXMpCiAgICAgICAgICAgICAgZXJyb3JfY29kZSwgZHVja19pZCwgdG90YWxfcmFyZSA9IENPTExFQ1RfRFVDSyhoZWFkZXJzLGlkX25lc3QscHJveGllcykKICAgICAgICAgICAgICBpZiBlcnJvcl9jb2RlID09ICIiOgogICAgICAgICAgICAgICAgcHJpbnQoZiJ7xJFlbn3ilZEge2zhu6VjfeG6pFAgVFLhu6hORyBUSMOATkggQ8OUTkciLCBlbmQ9IiAiKQogICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludChmInvEkWVufeKVkSB7xJHhu4994bqkUCBUUuG7qE5HIFRI4bqkVCBC4bqgSSIsIGVuZD0iICIpCiAgICAgICAgICAgICAgbGlzdF9uZXN0LCBsaXN0X2R1Y2sgPSBMSVNUX1JFTE9BRChoZWFkZXJzLHByb3hpZXMpCiAgICAgICAgICAgICAgVE9OX25ldywgUEVUX25ldywgRUdHX25ldywgVFJVX25ldyA9IEdFVF9CQUxBTkNFKGhlYWRlcnMscHJveGllcykKICAgICAgICAgICAgICBEVUNLX25ldyA9IGxlbihsaXN0X2R1Y2spCiAgICAgICAgICAgICAgcHJpbnQoZiJ7xJHhu4994oCiIHt2w6BuZ317RFVDS19vbGR9IHvEkWVufcK7IHt2w6BuZ317RFVDS19uZXd9IikKICAgICAgICAgICAgICBkdWNrX2lkID0gbGlzdF9kdWNrWzBdWyJpZCJdCiAgICAgICAgICAgICAgZXJyb3JfY29kZSwgdG90YWxfcmFyZSA9IExBWV9ORVNUKGhlYWRlcnMsaWRfbmVzdCxkdWNrX2lkLHByb3hpZXMpCiAgICAgICAgICAgICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgiJUg6JU06JVMiKQogICAgICAgICAgICAgIGlmIGVycm9yX2NvZGUgPT0gIiI6CiAgICAgICAgICAgICAgICBwcmludChmInvEkWVufeKVmuKruHvEkeG7j31be3bDoG5nfXtub3dfdGltZX17xJHhu499XSB7dHLhuq9uZ31W4buKVCB7bGFtfXtkdWNrX2lkfSB7dHLhuq9uZ33EkMODIMSQ4bq6IFRS4buoTkcgTeG7mkkge2xhbX1be2jhu5NuZ317RFVDS19uZXd9L3ttYXhfZHVja317bGFtfV1cbiIpCiAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYie8SRZW594pWa4qu4e8SR4buPfVt7dsOgbmd9e25vd190aW1lfXvEkeG7j31dIHvEkeG7j31W4buKVCB7bGFtfXtkdWNrX2lkfSB7xJHhu499S0jDlE5HIMSQ4bq6IFRS4buoTkcgTeG7mkkge2xhbX1be2jhu5NuZ317RFVDS19uZXd9L3ttYXhfZHVja317bGFtfV1cbiIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgZGF0YSxkdWNrX2lkID0gUkVNT1ZFKGhlYWRlcnMsbGlzdF9kdWNrLHByb3hpZXMpCiAgICAgICAgICAgICAgaWYgZGF0YSA9PSBUcnVlOgogICAgICAgICAgICAgICAgcHJpbnQoZiJ7xJHhu4994p+p4p+pIMSQw4MgTOG7jEMgVuG7ilQge2R1Y2tfaWR9IFJBIEtI4buOSSBEQU5IIFPDgUNIIikKICAgICAgbm93X3RpbWUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgiJUg6JU06JVMiKQogICAgaWYgbm93X3RpbWUgPiBnb2xkZW5fZHVja190aW1lOgogICAgICBlcnJvcl9jb2RlLCBwcmljZV9nb2xkZW5fZHVjayA9IFBSSUNFX0dPTERFTl9EVUNLKGhlYWRlcnMscHJveGllcykKICAgICAgaWYgZXJyb3JfY29kZSA9PSAiIiBhbmQgcHJpY2VfZ29sZGVuX2R1Y2sgPT0gMjoKICAgICAgICBzdGF0dXMsIHRpbWVfdG9fZ29sZGVuX2R1Y2sgPSBHT0xERU5fRFVDS19JTkZPKGhlYWRlcnMscHJveGllcykKICAgICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpCiAgICAgICAgZ29sZGVuX2R1Y2tfdGltZSA9IG5vd190aW1lICsgdGltZWRlbHRhKHNlY29uZHM9dGltZV90b19nb2xkZW5fZHVjaykKICAgICAgICBub3dfdGltZSA9IG5vd190aW1lLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgICAgZ29sZGVuX2R1Y2tfdGltZSA9IGdvbGRlbl9kdWNrX3RpbWUuc3RyZnRpbWUoIiVIOiVNOiVTIikKICAgICAgICBpZiB0aW1lX3RvX2dvbGRlbl9kdWNrID09IDA6CiAgICAgICAgICB0eXBlX3Jld2FyZCwgYW1vdW50X3Jld2FyZCA9IEdPTERFTl9EVUNLX1JFV0FSRChoZWFkZXJzLHByb3hpZXMpCiAgICAgICAgICBpZiB0eXBlX3Jld2FyZCAhPTAgYW5kIGFtb3VudF9yZXdhcmQgIT0gMDoKICAgICAgICAgICAgaWYgdHlwZV9yZXdhcmQgPT0gMjoKICAgICAgICAgICAgICBuYW1lX3Jld2FyZCA9ICJQRVQiCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgbmFtZV9yZXdhcmQgPSAiRUdHIgogICAgICAgICAgICBlcnJvcl9jb2RlLCBkYXRhX2NsYWltID0gR09MREVOX0RVQ0tfQ0xBSU0oaGVhZGVycyxwcm94aWVzKQogICAgICAgICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpLnN0cmZ0aW1lKCIlSDolTTolUyIpCiAgICAgICAgICAgIGlmIGVycm9yX2NvZGUgPT0gIiI6CiAgICAgICAgICAgICAgcHJpbnQoZiJ7xJHhu4994p+oe3bDoG5nfXtub3dfdGltZX17xJHhu4994p+pIHts4bulY30gQuG6oW4gbmjhuq1uIMSRxrDhu6NjIHt2w6BuZ317YW1vdW50X3Jld2FyZH0ge2xhbX17bmFtZV9yZXdhcmR9IHts4bulY3104burIEdvbGRlbiBEdWNrXG4iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgIHByaW50KGYie8SR4buPfeKfqHt2w6BuZ317bm93X3RpbWV9e8SR4buPfeKfqSB7xJHhu499IELhuqFuIGtow7RuZyBuaOG6rW4gxJHGsOG7o2MgcGjhuqduIHRoxrDhu59uZyB04burIEdvbGRlbiBEdWNrXG4iKQogICAgICAgICAgc3RhdHVzLCB0aW1lX3RvX2dvbGRlbl9kdWNrID0gR09MREVOX0RVQ0tfSU5GTyhoZWFkZXJzLHByb3hpZXMpCiAgICAgICAgICBub3dfdGltZSA9IGRhdGV0aW1lLm5vdygpCiAgICAgICAgICBnb2xkZW5fZHVja190aW1lID0gbm93X3RpbWUgKyB0aW1lZGVsdGEoc2Vjb25kcz10aW1lX3RvX2dvbGRlbl9kdWNrKQogICAgICAgICAgbm93X3RpbWUgPSBub3dfdGltZS5zdHJmdGltZSgiJUg6JU06JVMiKQogICAgICAgICAgZ29sZGVuX2R1Y2tfdGltZSA9IGdvbGRlbl9kdWNrX3RpbWUuc3RyZnRpbWUoIiVIOiVNOiVTIikKUlVOX1FVQUNLUVVBQ0soKQ=="