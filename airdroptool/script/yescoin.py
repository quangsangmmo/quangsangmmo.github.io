api_key = "import requests, time
import json, random, string, os
from datetime import datetime, timezone
from termcolor import colored
from function import *
version = "6.0.0"
name_tool = "yescoin"
BANNER(name_tool, version)
print(f"""
{đỏ}⟩{vàng}⟩{lục}⟩ {lam}CÁC CHỨC NĂNG CỦA TOOL
{đỏ}[{vàng}+{đỏ}] {trắng}Auto click
{đỏ}[{vàng}+{đỏ}] {trắng}Auto cliam point offline
{đỏ}[{vàng}+{đỏ}] {trắng}Auto nâng cấp
{đỏ}[{vàng}+{đỏ}] {trắng}Hoàn thành các nhiệm vụ
{đỏ}[{vàng}+{đỏ}] {trắng}Auto sử dụng các booster 
""")
def AccountInfo(headers, proxies=None):
  message = totalAmount = userLevel = userId = ""
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://api-backend.yescoin.gold/account/getAccountInfo", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api-backend.yescoin.gold/account/getAccountInfo", headers=headers, timeout=30)
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      if message == "Success":
        balance = data["data"]["currentAmount"]
        userLevel = data["data"]["userLevel"]
        userId = data["data"]["userId"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return balance, userLevel, userId
def GameInfo(headers, proxies=None):
  message = level_Click = max_energy = energy = reset_energy = ""
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://api-backend.yescoin.gold/game/getGameInfo", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api-backend.yescoin.gold/game/getGameInfo", headers=headers, timeout=30)
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      if message == "Success":
        click_value = data["data"]["singleCoinValue"]
        max_energy = data["data"]["coinPoolTotalCount"]
        energy = data["data"]["coinPoolLeftCount"]
        recovery_energy = data["data"]["coinPoolRecoverySpeed"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return click_value, max_energy, energy, recovery_energy
def mySquad(headers, proxies=None):
  message = squadMembers = squadCoin = squadLevel = squadName = squadTgLink = ""
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://api-backend.yescoin.gold/squad/mySquad", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api-backend.yescoin.gold/squad/mySquad", headers=headers, timeout=30)
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      if message == "Success":
        isJoinSquad = data["data"]["isJoinSquad"]
        if isJoinSquad == True:
          squadInfo = data["data"]["squadInfo"]
          squadMembers = squadInfo["squadMembers"]
          squadCoin = squadInfo["squadTotalAmount"]
          squadLevel = squadInfo["squadLevel"]
          squadName = squadInfo["squadTitle"]
          squadLink = squadInfo["squadTgLink"]
        else:
          squadMembers, squadCoin, squadLevel, squadName, squadLink = joinSquad(headers, proxies)
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return squadMembers, squadCoin, squadLevel, squadName, squadLink

def joinSquad(headers, proxies=None):
  message = squadTitle = isJoinSquad = ""
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api-backend.yescoin.gold/squad/joinSquad", headers=headers, json={"squadTgLink":"@AirdropToolChannel"}, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api-backend.yescoin.gold/squad/joinSquad", headers=headers, json={"squadTgLink":"@AirdropToolChannel"})
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      if message == "Success":
        isJoinSquad = data["data"]["isJoinSquad"]
        if isJoinSquad == True:
          squadInfo = data["data"]["squadInfo"]
          squadMembers = squadInfo["squadMembers"]
          squadCoin = squadInfo["squadTotalAmount"]
          squadLevel = squadInfo["squadLevel"]
          squadName = squadInfo["squadTitle"]
          squadLink = squadInfo["squadTgLink"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return squadMembers, squadCoin, squadLevel, squadName, squadLink
def leaveSquad(headers, proxies=None):
  headers["content-type"] = "application/x-www-form-urlencoded"
  message = data = ""
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://api-backend.yescoin.gold/squad/leaveSquad", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api-backend.yescoin.gold/squad/leaveSquad", headers=headers, timeout=30)
      response.raise_for_status()
      data = response.json()
      print(data)
      message = data["message"]
      if message == "Success":
        data = data["data"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return data
def getListTask(headers, proxies=None):
  message = data = ""
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://api-backend.yescoin.gold/task/getCommonTaskList", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api-backend.yescoin.gold/task/getCommonTaskList", headers=headers, timeout=30)
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      if message == "Success":
        listTask = data["data"]
        for Task in listTask:
          taskStatus = Task["taskStatus"]
          if taskStatus == 0:
            taskName, bonusAmount = finishTask(headers,Task,proxies)
            now_time = datetime.now().strftime("%H:%M:%S")
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã hoàn thành nhiệm vụ {lục}{taskName} {vàng}+{bonusAmount}🪙")
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
def finishTask(headers,Task, proxies=None):
  taskId = Task["taskId"]
  taskName = Task["taskName"]
  message = bonusAmount = ""
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api-backend.yescoin.gold/task/finishTask", headers=headers, json=taskId, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api-backend.yescoin.gold/task/finishTask", headers=headers, json=taskId)
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      if message == "Success":
        bonusAmount = data["data"]["bonusAmount"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return taskName, bonusAmount
def Collect(headers,countCollect, proxies=None):
  message = collectAmount = collectStatus = ""
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api-backend.yescoin.gold/game/collectCoin", headers=headers, json=countCollect, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api-backend.yescoin.gold/game/collectCoin", headers=headers, json=countCollect)
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      if message == "Success":
        collectAmount = data["data"]["collectAmount"]
        collectStatus = data["data"]["collectStatus"]
      else:
        pass#print(response.text)
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return collectAmount, collectStatus
def ChestInfo(headers, proxies=None):
  message = collectAmount = collectStatus = ""
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://api-backend.yescoin.gold/game/getSpecialBoxInfo", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api-backend.yescoin.gold/game/getSpecialBoxInfo", headers=headers, timeout=30)
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      if message == "Success":
        autoBox = data["data"]["autoBox"]
        if autoBox != None:
          boxStatus = autoBox["boxStatus"]
          if boxStatus == True:
            CollectChest(headers, autoBox, proxies)
        recoveryBox = data["data"]["recoveryBox"]
        if recoveryBox != None:
          boxStatus = recoveryBox["boxStatus"]
          if boxStatus == True:
            CollectChest(headers, recoveryBox, proxies)
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
def CollectChest(headers, infoBox, proxies=None):
  boxType = infoBox["boxType"]
  ChestTotalCount = infoBox["specialBoxTotalCount"]
  message = collectAmount = collectStatus = ""
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api-backend.yescoin.gold/game/collectSpecialBoxCoin", headers=headers, json={"boxType":boxType,"coinCount":ChestTotalCount}, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api-backend.yescoin.gold/game/collectSpecialBoxCoin", headers=headers, json={"boxType":boxType,"coinCount":ChestTotalCount})
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      if message == "Success":
        collectAmount = data["data"]["collectAmount"]
        collectStatus = data["data"]["collectStatus"]
        now_time = datetime.now().strftime("%H:%M:%S")
        if collectStatus == True:
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã mở Kho Báu {vàng}+{collectAmount:,}🪙 {đỏ}»", end=" ")
          #exit()
        else:
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Mở kho báu THẤT BẠI {đỏ}»", end=" ")
        balance, userLevel, userId = AccountInfo(headers,proxies)
        print(f"{vàng}🪙{balance:,}\n")
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
def AccountBuild(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://api-backend.yescoin.gold/build/getAccountBuildInfo", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api-backend.yescoin.gold/build/getAccountBuildInfo", headers=headers, timeout=30)
      response.raise_for_status()
      data = response.json()
      
      message = data["message"]
      if message == "Success":
        ChestCount = data["data"]["specialBoxLeftRecoveryCount"]
        RecoveryCount = data["data"]["coinPoolLeftRecoveryCount"]
        ClickConfig = [data["data"]["singleCoinValue"],data["data"]["singleCoinLevel"],data["data"]["singleCoinUpgradeCost"]]
        RecoveryConfig = [data["data"]["coinPoolRecoverySpeed"],data["data"]["coinPoolRecoveryLevel"],data["data"]["coinPoolRecoveryUpgradeCost"]]
        EnergyConfig = [data["data"]["coinPoolTotalCount"],data["data"]["coinPoolTotalLevel"],data["data"]["coinPoolTotalUpgradeCost"]]
        BotConfig = [data["data"]["swipeBotSpeedValue"],data["data"]["swipeBotLevel"],data["data"]["swipeBotUpgradeCost"]]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return ChestCount, RecoveryCount, ClickConfig, RecoveryConfig, EnergyConfig, BotConfig
def recoverChest(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api-backend.yescoin.gold/game/recoverSpecialBox", headers=headers, json={}, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api-backend.yescoin.gold/game/recoverSpecialBox", headers=headers, json={})
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      if message == "Success":
        data = data["data"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return data
def recoverCoinPool(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api-backend.yescoin.gold/game/recoverCoinPool", headers=headers, json={}, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api-backend.yescoin.gold/game/recoverCoinPool", headers=headers, json={})
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      if message == "Success":
        data = data["data"]
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return data
def levelUp(headers, dataUpgrade, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api-backend.yescoin.gold/build/levelUp", headers=headers, json=dataUpgrade, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api-backend.yescoin.gold/build/levelUp", headers=headers, json=dataUpgrade)
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      if message == "Success":
        data = data["data"]
        #print(data)
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return data
def ClaimOffline(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.post("https://api-backend.yescoin.gold/game/claimOfflineYesPacBonus", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api-backend.yescoin.gold/game/claimOfflineYesPacBonus", headers=headers)
      response.raise_for_status()
      data = response.json()
      #print(data)
      message = data["message"]
      if message == "Success":
        collectAmount = data["data"]["collectAmount"]
        status = data["data"]["collectStatus"]
      else:
        collectAmount = None
        status = False
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return collectAmount, status
def signIn(headers, proxies=None):
  error_count = 0
  max_retries = 10
  while True:
    try:
      if proxies:
        response = requests.get("https://api-backend.yescoin.gold/signIn/list", headers=headers, proxies=proxies, timeout=30)
      else:
        response = requests.get("https://api-backend.yescoin.gold/signIn/list", headers=headers)
      response.raise_for_status()
      data = response.json()
      #print(data)
      message = data["message"]
      if message == "Success":
        signInList = data["data"]
      else:
        signInList = ""
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return signInList
def signInClaim(headers, data, proxies=None):
  error_count = 0
  max_retries = 10
  print(data)
  while True:
    try:
      if proxies:
        response = requests.post("https://api-backend.yescoin.gold/signIn/claim", headers=headers, json=data, proxies=proxies, timeout=30)
      else:
        response = requests.post("https://api-backend.yescoin.gold/signIn/claim", headers=headers, json=data)
      response.raise_for_status()
      data = response.json()
      message = data["message"]
      print(data)
      if message == "Success":
        status = data["status"]
        reward = data["reward"]
      else:
        status = False
        reward = 0
      break
    except:
      error_count = handleErrors(error_count, max_retries)
    if error_count >= max_retries:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã gặp lỗi quá 10 lần, khởi chạy lại tool YESCOIN")
      RUN_YESCOIN()
      break
    COUNTDOWN(10)
  return status, reward

def RUN_YESCOIN():
  stt = 0
  with open('config/yescoin.json', 'r', encoding='utf-8') as file:
    config_data = json.loads(remove_comments(file.read()))
  users = config_data
  if len(users) > 10:
    print("Bạn chỉ được phép thêm tối đa 10 tài khoản để chạy tool")
    exit()
  for user in users:
    account = user["STT_ACCOUNT"]
    authorization = user["AUTHORIZATION"]
    if authorization == "" or authorization == "thay_thế_bằng_authorization":
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}Tài khoản {vàng}{account.split('_')[1]} {đỏ}DATA đang bị trống")
      continue
    with open('config/setting.json', 'r', encoding='utf-8') as file:
      config_acc = json.loads(remove_comments(file.read()))[account]
    proxy_list = config_acc["proxy"]
    type_proxy = config_acc["type_proxy"]
    user_agent = config_acc["user-agent"]
    if proxy_list != "":
      proxy_list = proxy_list.split(":")
      proxy = f"{type_proxy}://{proxy_list[2]}:{proxy_list[3]}@{proxy_list[0]}:{proxy_list[1]}"
      proxies = {
      'http': proxy,
      'https': proxy,}
    else:
      if account.split('_')[1] != "1":
        print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}Chuyển tài khoản do không có proxy")
        continue
      proxies = ""
    ip, fakeip = getIP(proxies)
    if ip == fakeip == None:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}\nĐỔI TÀI KHOẢN DO KHÔNG LẤY ĐƯỢC IP, HÃY KIỂM TRA LẠI PROXY\n")
      continue
    headers = {
      'Host':'api.yescoin.gold',
      'sec-ch-ua':'"Chromium";v="124", "Android WebView";v="124", "Not-A.Brand";v="99"',
      'sec-ch-ua-mobile':'?1',
      'token':authorization,
      'user-agent':user_agent,
      'sec-ch-ua-platform':'"Android"',
      'accept':'*/*',
      'origin':'https://www.yescoin.gold',
      'x-requested-with':'mark.via.gp',
      'sec-fetch-site':'cross-site',
      'sec-fetch-mode':'cors',
      'sec-fetch-dest':'empty',
      'referer':'https://www.yescoin.gold/',
      'accept-encoding':'gzip, deflate, br, zstd',
      'accept-language':'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7',
      'priority':'u=1, i'}
    balance, userLevel, userId = AccountInfo(headers,proxies)
    click_value, max_energy, energy, recovery_energy = GameInfo(headers, proxies)
    squadMembers, squadCoin, squadLevel, squadName, squadTgLink = mySquad(headers, proxies)
    ChestCount, RecoveryCount, ClickConfig, RecoveryConfig, EnergyConfig, BotConfig = AccountBuild(headers, proxies)
    print(f"""{đậm}{đen}<<<<<<<<<<<<<<<<<{lam}[{vàngBG}{đỏ}THÔNG TIN TÀI KHOẢN YESCOIN{đenBG}{lam}]{đen}>>>>>>>>>>>>>>>>>\n{đen}〘👤〙{trắng}UserID {đỏ}: {lục}{userId} {trắng}({hồng}{account.split('_')[1]}{trắng})\n{đen}〘🪙〙{trắng}Số Dư {đỏ}: {vàng}{balance:,}\n{đen}〘🔢〙{trắng}Level {đỏ}: {lam}{userLevel} \n{đen}〘📊〙{trắng}Thông số Game{đỏ}: {vàng}+{click_value}{đen}/{vàng}click {đỏ}[{lam}{energy:,}{đen}/{lam}{max_energy:,}{đỏ}] {hồng}{BotConfig[1]}🤖\n{đen}〘🛖〙{trắng}Thông tin Squad{đỏ}: {xanh}{squadName} {đen}| {vàng}{squadCoin:,}🪙 {đen}| {lục}{squadMembers}👥\n{đen}〘🌏〙{trắng}IP {đỏ}: {nâu}{ip} {lục}»»» {trắng}Fake IP {đỏ}: {lam}{fakeip}
  """)
    start_time = datetime.now()
    print(f"{đỏ}\033[1;33;40mBẮT ĐẦU CHẠY TOOL {thường}{đậm}{đỏ}» {đen}[{vàng}{start_time.strftime('%H:%M:%S')}{đen}]\n")
    getListTask(headers,proxies)
    """
    signInList = signIn(headers, proxies)
    if signInList != "":
      for sign in signInList:
        if sign["openIn"] > 0:
          break
        if sign["status"] == 1 and sign["expired"] == 0:
          timestamp = int(time.time())
          headers["tm"] = str(timestamp)
          headers["sign"] = "9f90122cbd94522d40f7e407265110f7"
          status, reward = signInClaim(headers, {"id":sign['id'],"createAt":timestamp,"signInType":1,"destination":""}, proxies)
          headers.pop("tm")
          headers.pop("sign")
          now_time = datetime.now().strftime("%H:%M:%")
          if status == True:
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Đã điểm danh hôm nay {vàng}+{reward}")
            break
          else:
            print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Đã điểm danh thất bại")
            break
    """
    #print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}NÂNG CẤP BOOST")
    def UPGRADE(balance, ClickConfig,RecoveryConfig,EnergyConfig, BotConfig):
      while balance > BotConfig[2] or balance > ClickConfig[2] or balance > RecoveryConfig[2] or balance > EnergyConfig[2]:
        dataUpgrade = level = priceLevelUp = nameLevelUp = None
        if balance > BotConfig[2] and BotConfig[1] < 5 and dataUpgrade == None:
          level = BotConfig[1]
          priceLevelUp = BotConfig[2]
          nameLevelUp = "YesPac"
          dataUpgrade = 4
        if balance > RecoveryConfig[2] and RecoveryConfig[1] < 12 and dataUpgrade == None:
          level = RecoveryConfig[1]
          priceLevelUp = RecoveryConfig[2]
          nameLevelUp = "Recovery Coin"
          dataUpgrade = 2
        if balance > EnergyConfig[2] and EnergyConfig[1] < 10 and dataUpgrade == None:
          level = EnergyConfig[1]
          priceLevelUp = EnergyConfig[2]
          nameLevelUp = "Max Energy"
          dataUpgrade = 3
        if balance > ClickConfig[2] and ClickConfig[1] <= 6 and dataUpgrade == None:
          level = ClickConfig[1]
          priceLevelUp = ClickConfig[2]
          nameLevelUp = "Click Value"
          dataUpgrade = 1
        if dataUpgrade == None:
          break
        data = levelUp(headers, dataUpgrade, proxies)
        balance, userLevel, userId = AccountInfo(headers,proxies)
        ChestCount, RecoveryCount, ClickConfig, RecoveryConfig, EnergyConfig, BotConfig = AccountBuild(headers, proxies)
        now_time = datetime.now().strftime("%H:%M:%S")
        if data == True:
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {trắng}Nâng cấp {lục}{nameLevelUp} {trắng}({lam}{level+1}{trắng}) {đỏ}-{priceLevelUp:,} {đen}» {vàng}{balance:,}")
        else:
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Nâng cấp {lục}{nameLevelUp} {đỏ} THẤT BẠI {đen}» {vàng}{balance:,}")
      return balance, ClickConfig,RecoveryConfig,EnergyConfig, BotConfig
    balance, ClickConfig,RecoveryConfig,EnergyConfig, BotConfig = UPGRADE(balance, ClickConfig,RecoveryConfig,EnergyConfig, BotConfig)
    #print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {đỏ}KHÔNG ĐỦ TIỀN NÂNG CẤP")
    if ChestCount > 0:
      for i in range(0,ChestCount):
        data = recoverChest(headers, proxies)
        if data == True:
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã kích hoạt kho báu\n")
          ChestInfo(headers, proxies)
        else:
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Kích hoạt kho báu thất bại\n")
    collectAmount, status = ClaimOffline(headers,proxies)
    if status == True:
      now_time = datetime.now().strftime("%H:%M:%S")
      print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã {lam}Claim Offline {vàng}+{collectAmount:,}\n")
    while True:
      ChestInfo(headers, proxies)
      click_value, max_energy, energy, recovery_energy = GameInfo(headers, proxies)
      if energy/click_value > 50:
        if energy/click_value > 300:
          countCollect = random.randint(300,int(energy/click_value))
          if countCollect > 500:
            countCollect = random.randint(300,500)
        else:
          countCollect = int(energy/click_value)
        countCollect = int(energy/click_value)
        collectAmount, collectStatus = Collect(headers, countCollect, proxies)
        now_time = datetime.now().strftime("%H:%M:%S")
        if collectStatus == True:
          print(f"{đen}╔═{đỏ}[{vàng}{now_time}{đỏ}] {trắng}Đã Click {vàng}{countCollect} {trắng}lần {vàng}+{collectAmount:,}🪙 {đỏ}»", end=" ")
          balance, userLevel, userId = AccountInfo(headers,proxies)
          print(f"🪙{vàng}{balance:,}\n{đen}╚⫸{hồng}Link tool & hướng dẫn tại Telegram{đỏ}: {lục}@AirdropToolChannel\n")
        else:
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ} Click nhận coin thất bại\n")
      ChestCount, RecoveryCount, ClickConfig, RecoveryConfig, EnergyConfig, BotConfig = AccountBuild(headers, proxies)
      click_value, max_energy, energy, recovery_energy = GameInfo(headers, proxies)
      if RecoveryCount > 0 and energy/click_value < 50:
        data = recoverCoinPool(headers, proxies)
        if data == True:
          click_value, max_energy, energy, recovery_energy = GameInfo(headers, proxies)
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {lục}Đã khôi phục lại Coin Pool {đỏ}» {vàng}{energy}{đen}/{vàng}{max_energy}\n")
        else:
          now_time = datetime.now().strftime("%H:%M:%S")
          print(f"{đỏ}⟨{vàng}{now_time}{đỏ}⟩ {đỏ}Khôi phục Coin Pool THẤT BẠI\n")
      elif energy/click_value < 50 and RecoveryCount == 0:
        print(f"{đỏ}⟩{vàng}⟩{lục}⟩ {trắng}HẾT LƯỢT CLICK, HẾT BOOTERS {đỏ}» {vàng}ĐỔI TÀI KHOẢN {lục}{ChestCount} {RecoveryCount}\n")
        break
RUN_YESCOIN()"